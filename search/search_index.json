{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Enterprise Application Architecture Platform for Enterprise Solutions Enterprise Architecture Framework Web Technology Concepts Protocols Communication Types Web Services Data Exchange Formats Development Process Management Source Code Management Continuous Integration Software Testing Software Documentation Design Patterns Introduction Types of Patterns Dependency Injection and Inversion of Control Convention vs Configuration Factory Pattern Singleton Pattern Lazy Initialization Web App Architecture Layered Architecture MVC Pattern SOA and RESTful: Resource Oriented Architecture Analysis and Design: Read Only Resource Oriented Services Read Write Resource Oriented Services Security: Basic Attacks State Based Attacks Client Side Authentication Cross Site Scripting Denial of Service SQL Injection Development Methodologies: AGILE: Principles Methodologies Test Driven Development (TDD) Behaviour Driven Development (BDD) The important topics are labeled as \ud83d\udd25.","title":"Progress"},{"location":"design-patterns/convention-vs-configuration/","text":"Configuration Configuration is the manner in which components(variables, classes, interfaces, templates etc.) are arranged to make up the application. Convention Coding conventions are a set of guidelines for a specific programming language that recommend programming style, practices, and methods for each aspect of a program written in that language. Convention over Configuration Convention over configuration is a software development approach geared toward developing programs according to typical programming conventions, versus programmer defined configurations. It enables quick and simple software creation while maintaining base software requirements. Convention over configuration is also known as coding by convention. Convention over configuration relies on the development of a program through the use of an underlying language\u2019s native procedures, functions, classes and variables. This approach reduces or eliminates the need for additional software configuration files, ultimately facilitating and expediting software development, code consistency and maintenance. However, to follow these conventions, a software developer must be acquainted with the underlying framework. Definition Convention over configuration (also known as coding by convention) is a software design paradigm used by software frameworks that attempts to decrease the number of decisions that a developer using the framework is required to make without necessarily losing flexibility and Don't repeat yourself (DRY) principles. Example : The phrase essentially means a developer only needs to specify unconventional aspects of the application. For example, if there is a class Sales in the model, the corresponding table in the database is called \"sales\" by default. It is only if one deviates from this convention, such as the table \"product sales\", that one needs to write code regarding these names. Motivation Some frameworks need multiple configuration files, each with many settings. These provide information specific to each project, ranging from URLs to mappings between classes and database tables. Many configuration files with many parameters are often difficult to maintain. Usage Many modern frameworks use a convention over configuration approach. The concept is older, however, dating back to the concept of a default, and can be spotted more recently in the roots of Java libraries. For example, the JavaBeans specification relies on it heavily. To quote the JavaBeans specification. The Maven software tool auto-generated this directory structure for a Java project. Benefit Benefit of convention over configuration paradigm in web development the productivity since you won't be required to configured to set all the rules and there are less decision that a programmer has to make . Disadvantage Disadvantages of the convention over configuration approach can occur due to conflicts with other software design principles, like the Zen of Python 's \"explicit is better than implicit.\"","title":"Convention vs Configuration"},{"location":"design-patterns/convention-vs-configuration/#configuration","text":"Configuration is the manner in which components(variables, classes, interfaces, templates etc.) are arranged to make up the application.","title":"Configuration"},{"location":"design-patterns/convention-vs-configuration/#convention","text":"Coding conventions are a set of guidelines for a specific programming language that recommend programming style, practices, and methods for each aspect of a program written in that language.","title":"Convention"},{"location":"design-patterns/convention-vs-configuration/#convention-over-configuration","text":"Convention over configuration is a software development approach geared toward developing programs according to typical programming conventions, versus programmer defined configurations. It enables quick and simple software creation while maintaining base software requirements. Convention over configuration is also known as coding by convention. Convention over configuration relies on the development of a program through the use of an underlying language\u2019s native procedures, functions, classes and variables. This approach reduces or eliminates the need for additional software configuration files, ultimately facilitating and expediting software development, code consistency and maintenance. However, to follow these conventions, a software developer must be acquainted with the underlying framework.","title":"Convention over Configuration"},{"location":"design-patterns/convention-vs-configuration/#definition","text":"Convention over configuration (also known as coding by convention) is a software design paradigm used by software frameworks that attempts to decrease the number of decisions that a developer using the framework is required to make without necessarily losing flexibility and Don't repeat yourself (DRY) principles. Example : The phrase essentially means a developer only needs to specify unconventional aspects of the application. For example, if there is a class Sales in the model, the corresponding table in the database is called \"sales\" by default. It is only if one deviates from this convention, such as the table \"product sales\", that one needs to write code regarding these names.","title":"Definition"},{"location":"design-patterns/convention-vs-configuration/#motivation","text":"Some frameworks need multiple configuration files, each with many settings. These provide information specific to each project, ranging from URLs to mappings between classes and database tables. Many configuration files with many parameters are often difficult to maintain.","title":"Motivation"},{"location":"design-patterns/convention-vs-configuration/#usage","text":"Many modern frameworks use a convention over configuration approach. The concept is older, however, dating back to the concept of a default, and can be spotted more recently in the roots of Java libraries. For example, the JavaBeans specification relies on it heavily. To quote the JavaBeans specification. The Maven software tool auto-generated this directory structure for a Java project.","title":"Usage"},{"location":"design-patterns/convention-vs-configuration/#benefit","text":"Benefit of convention over configuration paradigm in web development the productivity since you won't be required to configured to set all the rules and there are less decision that a programmer has to make .","title":"Benefit"},{"location":"design-patterns/convention-vs-configuration/#disadvantage","text":"Disadvantages of the convention over configuration approach can occur due to conflicts with other software design principles, like the Zen of Python 's \"explicit is better than implicit.\"","title":"Disadvantage"},{"location":"design-patterns/di-and-ioc/","text":"Dependency Injection It is a design technique that allows us to inject dependencies into our code. It is a way to decouple the code from the way it is implemented. It removes the dependency from the programming code so that it can be easy to manage and test the application. It makes our programming code loosely coupled. Dependency injection is a way to create your dependencies outside of the class that uses it. You inject them from the outside, and take control about their creation away from the inside of your class. This is also why dependency injection is a realization of the Inversion of control (IoC) principle. Inversion of Control It means to create instance of the dependencies first and latter instance of the class, instead of creating an instance of the class first and then creating instance of the dependencies. It inverts the flow of control of the program execution. Instead of callee controlling the flow of control (while creating dependencies) of the program execution, caller controls the flow of control. Purpose of IOC: To decouple the execution of a task from implementation. To focus a module on the task it is designed for. To free modules from assumptions about how other systems do what they do and instead rely on contracts. To prevent side effects when replacing a module. Inversion of control is sometimes humorously referred to as the \" Hollywood Principle: Don't call us, we'll call you \".","title":"Dependency Injection and Inversion of Control"},{"location":"design-patterns/di-and-ioc/#dependency-injection","text":"It is a design technique that allows us to inject dependencies into our code. It is a way to decouple the code from the way it is implemented. It removes the dependency from the programming code so that it can be easy to manage and test the application. It makes our programming code loosely coupled. Dependency injection is a way to create your dependencies outside of the class that uses it. You inject them from the outside, and take control about their creation away from the inside of your class. This is also why dependency injection is a realization of the Inversion of control (IoC) principle.","title":"Dependency Injection"},{"location":"design-patterns/di-and-ioc/#inversion-of-control","text":"It means to create instance of the dependencies first and latter instance of the class, instead of creating an instance of the class first and then creating instance of the dependencies. It inverts the flow of control of the program execution. Instead of callee controlling the flow of control (while creating dependencies) of the program execution, caller controls the flow of control.","title":"Inversion of Control"},{"location":"design-patterns/di-and-ioc/#purpose-of-ioc","text":"To decouple the execution of a task from implementation. To focus a module on the task it is designed for. To free modules from assumptions about how other systems do what they do and instead rely on contracts. To prevent side effects when replacing a module. Inversion of control is sometimes humorously referred to as the \" Hollywood Principle: Don't call us, we'll call you \".","title":"Purpose of IOC:"},{"location":"design-patterns/factory-pattern/","text":"It comes under creational pattern as this pattern provides one of the best ways to create an object. We create object without exposing the creation logic to the client and refer to newly created object using a common interface. Applicability: Use the Factory Pattern when you don\u2019t know beforehand the exact types and dependencies of the objects your code should work with. Use the Factory Method when you want to provide users of your library or framework with a way to extend its internal components. Use the Factory Method when you want to save system resources by reusing existing objects instead of rebuilding them each time. Pros and Cons Pros Cons You avoid tight coupling between the creator and the concrete products. The code may become more complicated since you need to introduce a lot of new subclasses to implement the pattern. The best case scenario is when you\u2019re introducing the pattern into an existing hierarchy of creator classes. Single Responsibility Principle . You can move the product creation code into one place in the program; making the code easier to support. Open/Closed Principle . You can introduce new types of products into the program without breaking existing client code. Class Diagram Implementation Step 1 Create an interface. Shape.java public interface Shape { void draw (); } Step 2 Create concrete classes implementing the same interface. Circle.java public class Circle implements Shape { @Override public void draw () { System . out . println ( \"Inside Circle::draw() method.\" ); } } Rectangle.java public class Rectangle implements Shape { @Override public void draw () { System . out . println ( \"Inside Rectangle::draw() method.\" ); } } Square.java public class Square implements Shape { @Override public void draw () { System . out . println ( \"Inside Square::draw() method.\" ); } } Step 3 Create a Factory to generate object of concrete class based on given information. ShapeFactory.java public class ShapeFactory { //use getShape method to get object of type shape public Shape getShape ( String shapeType ){ if ( shapeType == null ){ return null ; } if ( shapeType . equalsIgnoreCase ( \"CIRCLE\" )){ return new Circle (); } else if ( shapeType . equalsIgnoreCase ( \"RECTANGLE\" )){ return new Rectangle (); } else if ( shapeType . equalsIgnoreCase ( \"SQUARE\" )){ return new Square (); } return null ; } } Step 4 Use the Factory to get object of concrete class by passing an information such as type. FactoryPatternDemo.java public class FactoryPatternDemo { public static void main ( String [] args ) { ShapeFactory shapeFactory = new ShapeFactory (); //get an object of Circle and call its draw method. Shape shape1 = shapeFactory . getShape ( \"CIRCLE\" ); //call draw method of Circle shape1 . draw (); //get an object of Rectangle and call its draw method. Shape shape2 = shapeFactory . getShape ( \"RECTANGLE\" ); //call draw method of Rectangle shape2 . draw (); //get an object of Square and call its draw method. Shape shape3 = shapeFactory . getShape ( \"SQUARE\" ); //call draw method of square shape3 . draw (); } Output Inside Circle::draw() method. Inside Rectangle::draw() method. Inside Square::draw() method.","title":"Factory Pattern"},{"location":"design-patterns/factory-pattern/#applicability","text":"Use the Factory Pattern when you don\u2019t know beforehand the exact types and dependencies of the objects your code should work with. Use the Factory Method when you want to provide users of your library or framework with a way to extend its internal components. Use the Factory Method when you want to save system resources by reusing existing objects instead of rebuilding them each time.","title":"Applicability:"},{"location":"design-patterns/factory-pattern/#pros-and-cons","text":"Pros Cons You avoid tight coupling between the creator and the concrete products. The code may become more complicated since you need to introduce a lot of new subclasses to implement the pattern. The best case scenario is when you\u2019re introducing the pattern into an existing hierarchy of creator classes. Single Responsibility Principle . You can move the product creation code into one place in the program; making the code easier to support. Open/Closed Principle . You can introduce new types of products into the program without breaking existing client code.","title":"Pros and Cons"},{"location":"design-patterns/factory-pattern/#class-diagram","text":"","title":"Class Diagram"},{"location":"design-patterns/factory-pattern/#implementation","text":"Step 1 Create an interface. Shape.java public interface Shape { void draw (); } Step 2 Create concrete classes implementing the same interface. Circle.java public class Circle implements Shape { @Override public void draw () { System . out . println ( \"Inside Circle::draw() method.\" ); } } Rectangle.java public class Rectangle implements Shape { @Override public void draw () { System . out . println ( \"Inside Rectangle::draw() method.\" ); } } Square.java public class Square implements Shape { @Override public void draw () { System . out . println ( \"Inside Square::draw() method.\" ); } } Step 3 Create a Factory to generate object of concrete class based on given information. ShapeFactory.java public class ShapeFactory { //use getShape method to get object of type shape public Shape getShape ( String shapeType ){ if ( shapeType == null ){ return null ; } if ( shapeType . equalsIgnoreCase ( \"CIRCLE\" )){ return new Circle (); } else if ( shapeType . equalsIgnoreCase ( \"RECTANGLE\" )){ return new Rectangle (); } else if ( shapeType . equalsIgnoreCase ( \"SQUARE\" )){ return new Square (); } return null ; } } Step 4 Use the Factory to get object of concrete class by passing an information such as type. FactoryPatternDemo.java public class FactoryPatternDemo { public static void main ( String [] args ) { ShapeFactory shapeFactory = new ShapeFactory (); //get an object of Circle and call its draw method. Shape shape1 = shapeFactory . getShape ( \"CIRCLE\" ); //call draw method of Circle shape1 . draw (); //get an object of Rectangle and call its draw method. Shape shape2 = shapeFactory . getShape ( \"RECTANGLE\" ); //call draw method of Rectangle shape2 . draw (); //get an object of Square and call its draw method. Shape shape3 = shapeFactory . getShape ( \"SQUARE\" ); //call draw method of square shape3 . draw (); } Output Inside Circle::draw() method. Inside Rectangle::draw() method. Inside Square::draw() method.","title":"Implementation"},{"location":"design-patterns/introduction/","text":"A pattern (or design pattern) is a written document that describes a general solution to a design problem that occurs repeatedly in many projects. Information about Name that describes the pattern Problem to be solved by the pattern Context, or settings, in which the problem occurs Solution proposed to the problem Context for the solution Author and date information Sample code related to the solution, if it helps Structure of Design Pattern Term Description Pattern Name Describes the essence of the pattern in a short, but expressive, name Intent Describes what the pattern does Also Known As List any synonyms for the pattern Motivation Provides an example of a problem and how the pattern solves that problem Applicability Lists the situations where the pattern is applicable Structure Set of diagrams of the classes and objects that depict the pattern Participants Describes the classes and objects that participate in the design pattern and their responsibilities Collaborations Describes how the participants collaborate to carry out their responsibilities Consequences Describes the forces that exist with the pattern and the benefits, trade-offs, and the variable that is isolated by the pattern Importance of Design Patterns It makes code reusable, bug-free, and clean. Speed up development process. Changes or modification become easier. Reduce common problems of developers they face during development process. Improve object oriented skill. Easy to understand the flow of code. Less code so easy to maintain.","title":"Introduction"},{"location":"design-patterns/introduction/#information-about","text":"Name that describes the pattern Problem to be solved by the pattern Context, or settings, in which the problem occurs Solution proposed to the problem Context for the solution Author and date information Sample code related to the solution, if it helps","title":"Information about"},{"location":"design-patterns/introduction/#structure-of-design-pattern","text":"Term Description Pattern Name Describes the essence of the pattern in a short, but expressive, name Intent Describes what the pattern does Also Known As List any synonyms for the pattern Motivation Provides an example of a problem and how the pattern solves that problem Applicability Lists the situations where the pattern is applicable Structure Set of diagrams of the classes and objects that depict the pattern Participants Describes the classes and objects that participate in the design pattern and their responsibilities Collaborations Describes how the participants collaborate to carry out their responsibilities Consequences Describes the forces that exist with the pattern and the benefits, trade-offs, and the variable that is isolated by the pattern","title":"Structure of Design Pattern"},{"location":"design-patterns/introduction/#importance-of-design-patterns","text":"It makes code reusable, bug-free, and clean. Speed up development process. Changes or modification become easier. Reduce common problems of developers they face during development process. Improve object oriented skill. Easy to understand the flow of code. Less code so easy to maintain.","title":"Importance of Design Patterns"},{"location":"design-patterns/lazy-initialization/","text":"Singleton class can be instantiated by two methods: Early / Eager initialization In this method, class is initialized whether it is to be used or not. The main advantage of this method is its simplicity. Its drawback is that class is always initialized whether it is being used or not. Early initialization is just reverse, you initialize a singleton upfront at the time of class loading. Implmentation (Early) Step 1 Create a Singleton Class. SingleObject.java public class SingleObject { //create an object of SingleObject private static SingleObject instance = new SingleObject (); //make the constructor private so that this class cannot be //instantiated private SingleObject (){} //Get the only object available public static SingleObject getInstance (){ return instance ; } public void showMessage (){ System . out . println ( \"Hello World!\" ); } } Step 2 Get the only object from the singleton class. SingletonPatternDemo.java public class SingletonPatternDemo { public static void main ( String [] args ) { //illegal construct //Compile Time Error: The constructor SingleObject() is not visible //SingleObject object = new SingleObject(); //Get the only object available SingleObject object = SingleObject . getInstance (); //show the message object . showMessage (); } } Lazy initialization In this method, class in initialized only when it is required. It can save you from instantiating the class when you don\u2019t need it. Generally, lazy initialization is used when we create a singleton class. Lazy initialization means that you do not initialize objects until the first time they are used. Implmentation (Lazy) SingletonPatternDemo.java class LazySingleObject { // create static object and declare it // the object is declared not initialized // it is called lazy initialization as initializaiton is done when needed, not early private static LazySingleObject object ; // Make the constructor private so that the object cannot be instantiated. // It can only be accessed through getInstance() private LazySingleObject (){}; // method to initialized and return the object of the class public static LazySingleObject getInstance () { if ( object == null ) { // if object is null, initialize object = new LazySingleObject (); } return object ; } public void displayMessage (){ System . out . println ( \"Object is instantiated\" ); } } public class LazySingletonPattern { public static void main ( String [] args ) { // since the constructor is private, the statement below gives error // LazySingleObject object = new LazySingleObject(); // getInstance() is static, so it doesn't need any object to be initialized for it to be called LazySingleObject object = LazySingleObject . getInstance (); object . displayMessage (); } }","title":"Lazy Initialization"},{"location":"design-patterns/lazy-initialization/#early-eager-initialization","text":"In this method, class is initialized whether it is to be used or not. The main advantage of this method is its simplicity. Its drawback is that class is always initialized whether it is being used or not. Early initialization is just reverse, you initialize a singleton upfront at the time of class loading.","title":"Early / Eager initialization"},{"location":"design-patterns/lazy-initialization/#implmentation-early","text":"Step 1 Create a Singleton Class. SingleObject.java public class SingleObject { //create an object of SingleObject private static SingleObject instance = new SingleObject (); //make the constructor private so that this class cannot be //instantiated private SingleObject (){} //Get the only object available public static SingleObject getInstance (){ return instance ; } public void showMessage (){ System . out . println ( \"Hello World!\" ); } } Step 2 Get the only object from the singleton class. SingletonPatternDemo.java public class SingletonPatternDemo { public static void main ( String [] args ) { //illegal construct //Compile Time Error: The constructor SingleObject() is not visible //SingleObject object = new SingleObject(); //Get the only object available SingleObject object = SingleObject . getInstance (); //show the message object . showMessage (); } }","title":"Implmentation (Early)"},{"location":"design-patterns/lazy-initialization/#lazy-initialization","text":"In this method, class in initialized only when it is required. It can save you from instantiating the class when you don\u2019t need it. Generally, lazy initialization is used when we create a singleton class. Lazy initialization means that you do not initialize objects until the first time they are used.","title":"Lazy initialization"},{"location":"design-patterns/lazy-initialization/#implmentation-lazy","text":"SingletonPatternDemo.java class LazySingleObject { // create static object and declare it // the object is declared not initialized // it is called lazy initialization as initializaiton is done when needed, not early private static LazySingleObject object ; // Make the constructor private so that the object cannot be instantiated. // It can only be accessed through getInstance() private LazySingleObject (){}; // method to initialized and return the object of the class public static LazySingleObject getInstance () { if ( object == null ) { // if object is null, initialize object = new LazySingleObject (); } return object ; } public void displayMessage (){ System . out . println ( \"Object is instantiated\" ); } } public class LazySingletonPattern { public static void main ( String [] args ) { // since the constructor is private, the statement below gives error // LazySingleObject object = new LazySingleObject(); // getInstance() is static, so it doesn't need any object to be initialized for it to be called LazySingleObject object = LazySingleObject . getInstance (); object . displayMessage (); } }","title":"Implmentation (Lazy)"},{"location":"design-patterns/singleton-pattern/","text":"It comes under creational pattern as this pattern provides one of the best ways to create an object. This pattern involves a single class which is responsible to create an object while making sure that only single object gets created. This class provides a way to access its only object which can be accessed directly without need to instantiate the object of the class. Applicability: Use the Singleton pattern when a class in your program should have just a single instance available to all clients; for example, a single database object shared by different parts of the program. Use the Singleton pattern when you need stricter control over global variables. For accessing cache-memory, database connection, drivers, logging. etc. Pros and Cons Pros Cons control access to shared resources (databases; files etc) tight coupling -> complication for scaling and testing global access point for singletoned instances static memory allocation one time initialization hidden dependencies in the code ensuring maximum number of instances per object violation of single responsibility principle complications in multithreaded solutions Class Diagram Implementation Step 1 Create a Singleton Class. SingleObject.java public class SingleObject { //create an object of SingleObject private static SingleObject instance = new SingleObject (); //make the constructor private so that this class cannot be //instantiated private SingleObject (){} //Get the only object available public static SingleObject getInstance (){ return instance ; } public void showMessage (){ System . out . println ( \"Hello World!\" ); } } Step 2 Get the only object from the singleton class. SingletonPatternDemo.java public class SingletonPatternDemo { public static void main ( String [] args ) { //illegal construct //Compile Time Error: The constructor SingleObject() is not visible //SingleObject object = new SingleObject(); //Get the only object available SingleObject object = SingleObject . getInstance (); //show the message object . showMessage (); } } Output Hello World! Example: Counter Counter.java public class Counter { //create an object of Counter private static Counter instance = new Counter (); private static int count = 1 ; //make the constructor private so that this class cannot be //instantiated private Counter (){} //Get the only object available public static Counter getInstance (){ return instance ; } public void increment (){ count ++ ; } public void decrement (){ count -- ; } public void showCount (){ System . out . println ( \"Count: \" + count ); } } SingleCounterDemo.java public class SingleCounterDemo { public static void main ( String [] args ) { //create an object of Counter Counter counter_one = Counter . getInstance (); Counter counter_two = Counter . getInstance (); // Display both counts counter_one . showCount (); counter_two . showCount (); // Increment counter one. counter_one . increment (); // Display both counts counter_one . showCount (); counter_two . showCount (); // Increment counter two. counter_two . increment (); // Display both counts counter_one . showCount (); counter_two . showCount (); } } Output Count: 1 Count: 1 Count: 2 Count: 2 Count: 3 Count: 3 Database Connection Early Initialization JDBCSingletonEarly.java import java.io.* ; import java.sql.* ; class JDBCSingletonEarly { private static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\" ; private static final String DB_URL = \"jdbc:mysql://localhost/test\" ; private static final String USER = \"root\" ; private static final String PASS = \"\" ; private static JDBCSingletonEarly jdbc = new JDBCSingletonEarly (); private static Connection con ; private JDBCSingletonEarly () {} private static Connection getConnection () throws ClassNotFoundException , SQLException { Class . forName ( JDBC_DRIVER ); con = DriverManager . getConnection ( DB_URL , USER , PASS ); return con ; } public static JDBCSingletonEarly getInstance () { return jdbc ; } } Lazy Initialization JDBCSingletonLazy.java import java.io.* ; import java.sql.* ; class JDBCSingletonLazy { private static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\" ; private static final String DB_URL = \"jdbc:mysql://localhost/test\" ; private static final String USER = \"root\" ; private static final String PASS = \"\" ; private static JDBCSingletonLazy jdbc ; private static Connection con ; private JDBCSingletonLazy () {} //Now we are providing gloabal point of access through lazy initialization. public static JDBCSingletonLazy getInstance () { if ( jdbc == null ) { jdbc = new JDBCSingletonLazy (); } return jdbc ; } private static Connection getConnection () throws ClassNotFoundException , SQLException { Class . forName ( JDBC_DRIVER ); con = DriverManager . getConnection ( DB_URL , USER , PASS ); return con ; } }","title":"Singleton Pattern"},{"location":"design-patterns/singleton-pattern/#applicability","text":"Use the Singleton pattern when a class in your program should have just a single instance available to all clients; for example, a single database object shared by different parts of the program. Use the Singleton pattern when you need stricter control over global variables. For accessing cache-memory, database connection, drivers, logging. etc.","title":"Applicability:"},{"location":"design-patterns/singleton-pattern/#pros-and-cons","text":"Pros Cons control access to shared resources (databases; files etc) tight coupling -> complication for scaling and testing global access point for singletoned instances static memory allocation one time initialization hidden dependencies in the code ensuring maximum number of instances per object violation of single responsibility principle complications in multithreaded solutions","title":"Pros and Cons"},{"location":"design-patterns/singleton-pattern/#class-diagram","text":"","title":"Class Diagram"},{"location":"design-patterns/singleton-pattern/#implementation","text":"Step 1 Create a Singleton Class. SingleObject.java public class SingleObject { //create an object of SingleObject private static SingleObject instance = new SingleObject (); //make the constructor private so that this class cannot be //instantiated private SingleObject (){} //Get the only object available public static SingleObject getInstance (){ return instance ; } public void showMessage (){ System . out . println ( \"Hello World!\" ); } } Step 2 Get the only object from the singleton class. SingletonPatternDemo.java public class SingletonPatternDemo { public static void main ( String [] args ) { //illegal construct //Compile Time Error: The constructor SingleObject() is not visible //SingleObject object = new SingleObject(); //Get the only object available SingleObject object = SingleObject . getInstance (); //show the message object . showMessage (); } } Output Hello World!","title":"Implementation"},{"location":"design-patterns/singleton-pattern/#example","text":"","title":"Example:"},{"location":"design-patterns/singleton-pattern/#counter","text":"Counter.java public class Counter { //create an object of Counter private static Counter instance = new Counter (); private static int count = 1 ; //make the constructor private so that this class cannot be //instantiated private Counter (){} //Get the only object available public static Counter getInstance (){ return instance ; } public void increment (){ count ++ ; } public void decrement (){ count -- ; } public void showCount (){ System . out . println ( \"Count: \" + count ); } } SingleCounterDemo.java public class SingleCounterDemo { public static void main ( String [] args ) { //create an object of Counter Counter counter_one = Counter . getInstance (); Counter counter_two = Counter . getInstance (); // Display both counts counter_one . showCount (); counter_two . showCount (); // Increment counter one. counter_one . increment (); // Display both counts counter_one . showCount (); counter_two . showCount (); // Increment counter two. counter_two . increment (); // Display both counts counter_one . showCount (); counter_two . showCount (); } } Output Count: 1 Count: 1 Count: 2 Count: 2 Count: 3 Count: 3","title":"Counter"},{"location":"design-patterns/singleton-pattern/#database-connection","text":"","title":"Database Connection"},{"location":"design-patterns/singleton-pattern/#early-initialization","text":"JDBCSingletonEarly.java import java.io.* ; import java.sql.* ; class JDBCSingletonEarly { private static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\" ; private static final String DB_URL = \"jdbc:mysql://localhost/test\" ; private static final String USER = \"root\" ; private static final String PASS = \"\" ; private static JDBCSingletonEarly jdbc = new JDBCSingletonEarly (); private static Connection con ; private JDBCSingletonEarly () {} private static Connection getConnection () throws ClassNotFoundException , SQLException { Class . forName ( JDBC_DRIVER ); con = DriverManager . getConnection ( DB_URL , USER , PASS ); return con ; } public static JDBCSingletonEarly getInstance () { return jdbc ; } }","title":"Early Initialization"},{"location":"design-patterns/singleton-pattern/#lazy-initialization","text":"JDBCSingletonLazy.java import java.io.* ; import java.sql.* ; class JDBCSingletonLazy { private static final String JDBC_DRIVER = \"com.mysql.jdbc.Driver\" ; private static final String DB_URL = \"jdbc:mysql://localhost/test\" ; private static final String USER = \"root\" ; private static final String PASS = \"\" ; private static JDBCSingletonLazy jdbc ; private static Connection con ; private JDBCSingletonLazy () {} //Now we are providing gloabal point of access through lazy initialization. public static JDBCSingletonLazy getInstance () { if ( jdbc == null ) { jdbc = new JDBCSingletonLazy (); } return jdbc ; } private static Connection getConnection () throws ClassNotFoundException , SQLException { Class . forName ( JDBC_DRIVER ); con = DriverManager . getConnection ( DB_URL , USER , PASS ); return con ; } }","title":"Lazy Initialization"},{"location":"design-patterns/types-of-patterns/","text":"S.N. Pattern & Description 1 Creational Patterns These design patterns provide a way to create objects while hiding the creation logic rather than instantiating objects directly using new operator. This gives program more flexibility in deciding which objects need to be created for a given use case. Eg: Factory, Singleton etc. 2 Structural Patterns These design patterns concern class and object composition. Concept of inheritance is used to compose interfaces and define ways to compose objects to obtain new functionalities. Eg: Adapter, Bridge etc. 3 Behavioral Patterns These design patterns are specifically concerned with communication between objects. Eg: Obsesrver, Iterator etc. 4 J2EE Patterns These design patterns are specifically concerned with the presentation tier. These patterns are identified by Sun Java Center. Difference between Design Pattern and Framework Pattern A pattern is a way of doing something, or a way of pursuing intent. This idea applies to cooking, making fireworks, developing software, and to any other craft. It is a solution to a problem in a context. Patterns are classified into: 1) Design Pattern, 2) Architectural Pattern, 3) Macro \u2013 Architecture, 4) Micro \u2013 Architecture, 5) Idioms or Coding Patterns, 6) Language Paradigms etc. Design Pattern Design pattern is a category of patterns that deals with object oriented software. They represent solutions to problems that arise when developing software within a particular context. Design pattern captures the static and dynamic structure and collaboration among key participants in software designs. They can be used across different domains. Framework Framework is made up of group of concrete classes which can be directly implemented on an existing platform. Frameworks are written in programming languages. It is a large entity comprising of several design patterns. Frameworks are concerned with specific application domain e.g. database, web application etc. Above definition very much clarifies the difference among three. A design pattern is a type of pattern and is more like a concept, whereas a framework is something already coded to be used repetitively. Eg: MVC is a design pattern. \"MVC frameworks\" is shortcut for \"frameworks that follow MVC design pattern\".","title":"Types of Patterns"},{"location":"design-patterns/types-of-patterns/#pattern","text":"A pattern is a way of doing something, or a way of pursuing intent. This idea applies to cooking, making fireworks, developing software, and to any other craft. It is a solution to a problem in a context. Patterns are classified into: 1) Design Pattern, 2) Architectural Pattern, 3) Macro \u2013 Architecture, 4) Micro \u2013 Architecture, 5) Idioms or Coding Patterns, 6) Language Paradigms etc.","title":"Pattern"},{"location":"design-patterns/types-of-patterns/#design-pattern","text":"Design pattern is a category of patterns that deals with object oriented software. They represent solutions to problems that arise when developing software within a particular context. Design pattern captures the static and dynamic structure and collaboration among key participants in software designs. They can be used across different domains.","title":"Design Pattern"},{"location":"design-patterns/types-of-patterns/#framework","text":"Framework is made up of group of concrete classes which can be directly implemented on an existing platform. Frameworks are written in programming languages. It is a large entity comprising of several design patterns. Frameworks are concerned with specific application domain e.g. database, web application etc. Above definition very much clarifies the difference among three. A design pattern is a type of pattern and is more like a concept, whereas a framework is something already coded to be used repetitively. Eg: MVC is a design pattern. \"MVC frameworks\" is shortcut for \"frameworks that follow MVC design pattern\".","title":"Framework"},{"location":"development-process-management/continuous-integration/","text":"CI is a development practise that requires developer to integrate code into a shared repository, multiple times. Each code push is then verified by a automated build system, allowing team to detect problem early. By integrating regularly, we can detect error quickly and locate them more easily. Continous integration is cheap, not integrating continously is expensive. If we don't follow a continuous approach, you will jave a llonger periodss between integration. This makes it exponentially mroe difficult to find and fix problems, such integration problems can easily knock a project of schedule or cause it to fail altogether. Advantages of CI Increase visibility, enabling better communication. Catch issue early, spend less time debugging and more time in adding feature. Build a solid foundation. Stop waiting to find out if your code's going to work. Reduce integration problems. Reduce the risk of bugs. Making continous integration works, we need: Source code repository A check-in process An automated build process A willingness to work incrementally. It supplements the checks like: Automated code quality tests. Check test cases. Syntax style review tools Lints and formats Codebase Example : Travis Travis CI is a CI platform that automates the process of software testing and deployment of applications. It\u2019s built as a platform that integrates with your GitHub projects so that you can start testing your code on the fly. With customers like Facebook, Mozilla, Twitter, Heroku, and others, it\u2019s one of the leading continuous integration tools on the market. Key Features Free for public open source projected on GitHub As simple as signing up, adding a project, and you can begin testing Bilingual support so your code runs smooth across all versions Automated pull request verification Works with Email, Slack, HipChat and others for easy notifications Extended API and CMD tools for custom management Cost: Free for open repositories, Enterprise for private","title":"Continuous Integration"},{"location":"development-process-management/continuous-integration/#advantages-of-ci","text":"Increase visibility, enabling better communication. Catch issue early, spend less time debugging and more time in adding feature. Build a solid foundation. Stop waiting to find out if your code's going to work. Reduce integration problems. Reduce the risk of bugs. Making continous integration works, we need: Source code repository A check-in process An automated build process A willingness to work incrementally. It supplements the checks like: Automated code quality tests. Check test cases. Syntax style review tools Lints and formats Codebase","title":"Advantages of CI"},{"location":"development-process-management/continuous-integration/#example-travis","text":"Travis CI is a CI platform that automates the process of software testing and deployment of applications. It\u2019s built as a platform that integrates with your GitHub projects so that you can start testing your code on the fly. With customers like Facebook, Mozilla, Twitter, Heroku, and others, it\u2019s one of the leading continuous integration tools on the market.","title":"Example : Travis"},{"location":"development-process-management/continuous-integration/#key-features","text":"Free for public open source projected on GitHub As simple as signing up, adding a project, and you can begin testing Bilingual support so your code runs smooth across all versions Automated pull request verification Works with Email, Slack, HipChat and others for easy notifications Extended API and CMD tools for custom management Cost: Free for open repositories, Enterprise for private","title":"Key Features"},{"location":"development-process-management/software-documentation/","text":"UML (Unified Modeling Language) is a standard language for specifying, visualizing, constructing, and documenting the artifacts of software systems. UML stands for Unified Modeling Language. UML is different from the other common programming languages such as C++, Java, COBOL, etc. UML is a pictorial language used to make software blueprints. UML can be described as a general purpose visual modeling language to visualize, specify, construct, and document software system. Although UML is generally used to model software systems, it is not limited within this boundary. It is also used to model non-software systems as well. For example, the process flow in a manufacturing unit, etc. UML Building Blocks Things Relationships Diagrams Things Structural - static part, eg: class, interface, package, etc. Behavioral - dynamic part, eg: interaction, state machine, etc. Grouping - mechanism to group things together, eg: package, etc. Annotational - mechanism to capture remarks, description and comments. show how the elements are associated with each other. Relationships Dependency - relationship between two things in which change in one element also affects the other element. Association - set of links that conects the elements of a UML model. It also describes how many objects are taking part in that relationship. Generalization - relationship that describes inheritance relationship in the world of objects. Realization - relationship that describes the implementation of an interface in a class. Diagrams Class diagram Object diagram Use case diagram Sequence diagram Collaboration diagram Activity diagram Statechart diagram Deployment diagram Component diagram Examples Class Diagram Object Diagram Use Case Diagram Sequence Diagram","title":"Software Documentation"},{"location":"development-process-management/software-documentation/#uml-building-blocks","text":"Things Relationships Diagrams","title":"UML Building Blocks"},{"location":"development-process-management/software-documentation/#things","text":"Structural - static part, eg: class, interface, package, etc. Behavioral - dynamic part, eg: interaction, state machine, etc. Grouping - mechanism to group things together, eg: package, etc. Annotational - mechanism to capture remarks, description and comments. show how the elements are associated with each other.","title":"Things"},{"location":"development-process-management/software-documentation/#relationships","text":"Dependency - relationship between two things in which change in one element also affects the other element. Association - set of links that conects the elements of a UML model. It also describes how many objects are taking part in that relationship. Generalization - relationship that describes inheritance relationship in the world of objects. Realization - relationship that describes the implementation of an interface in a class.","title":"Relationships"},{"location":"development-process-management/software-documentation/#diagrams","text":"Class diagram Object diagram Use case diagram Sequence diagram Collaboration diagram Activity diagram Statechart diagram Deployment diagram Component diagram","title":"Diagrams"},{"location":"development-process-management/software-documentation/#examples","text":"","title":"Examples"},{"location":"development-process-management/software-documentation/#class-diagram","text":"","title":"Class Diagram"},{"location":"development-process-management/software-documentation/#object-diagram","text":"","title":"Object Diagram"},{"location":"development-process-management/software-documentation/#use-case-diagram","text":"","title":"Use Case Diagram"},{"location":"development-process-management/software-documentation/#sequence-diagram","text":"","title":"Sequence Diagram"},{"location":"development-process-management/software-testing/","text":"Proces of evaluating a software system by manual or automated means to verify that it satisfies the specified requirements. Why ? To find errors. To ensure that software delivered does not have defects. Post removal of bugs is expensive. Buggy software can be harmful to data, property and life. To improve quality, thus having good business and trust. To ensure all the product functionalities work as per the specification. How ? On basis of Resource Involved Manual testing Automated testing On basis of Orientation Demonstration Oriented Testing - Optimisitic / Positive Approach Destruction Oriented Testing - Pessimistic / Negative Approach Debugging Oriented Testing - Debugging Approach Levels of Software Testing Unit Testing Component Testing Integration Testing System Testing Acceptance Testing When ? Until BUDGET , TIME and QUALITY are satisfied. Principles - [PATTEED] Testing Shows Presence of Bugs Shows presence Cannot prove absence Helps to find undiscovered defects. Exhaustive Testing is impossible Impossible to test all possible input combinations. Smarter way should be adopted. Early Testing Start as soon as possible. finding defects early saves a lot of money than finding it later. Defect Clustering Equal distribution of bugs across the module is not possible. Defect may be clustered in small peice of code/module. Pesticide Paradox Executing same tests again and again will not help to identify more bugs. Review them regularly and modify if changes required. Absence of Error Fallacy Finding and fixing many bugs doesn't help. If if doesnot meed users requirement, it is not useful. Testing is Context Dependent Different software are tested in different contexts. Eg: Testing in a browser, testing in a server, testing in a mobile app. Eg: Testing for a banking sofware is different from testing for a web application. Verification and Validation Verification Validation It includes checking documents, design, codes and programs. It includes testing and validating the actual product. Verification is the static testing. Validation is the dynamic testing. It does not include the execution of the code. It includes the execution of the code. Methods used in verification are reviews, walkthroughs, inspections and desk-checking. Methods used in validation are Black Box Testing, White Box Testing and non-functional testing. It checks whether the software conforms to specifications or not. It checks whether the software meets the requirements and expectations of a customer or not. It can find the bugs in the early stage of the development. It can only find the bugs that could not be found by the verification process. The goal of verification is application and software architecture and specification. The goal of validation is an actual product. Quality assurance team does verification. Validation is executed on software code with the help of testing team. It comes before validation. It comes after verification. It consists of checking of documents/files and is performed by human. It consists of execution of program and is performed by computer. Test Cases A test case is a set of actions performed on a system to determine if it satisfies software requirements and functions correctly. The purpose of a test case is to determine if different features within a system are performing as expected and to confirm that the system satisfies all related standards, guidelines and customer requirements. The process of writing a test case can also help reveal errors or defects within the system. Test cases are typically written by members of the quality assurance (QA) team or the testing team and can be used as step-by-step instructions for each system test. Testing begins once the development team has finished a system feature or set of features. A sequence or collection of test cases is called a test suite . Benefits Guaranteed good test coverage. Reduced maintenance and software support costs. Reusable test cases. Confirmation that the software satisfies end-user requirements. Improved quality of software and user experience. Higher quality products lead to more satisfied customers. More satisfied customers will increase company profits. Test Cases Book Issue SN Test Cases Expected Result Test Result On Click of 1. Add Button At first, user have to fill all fields with valid data, if the accession number book is already issued, then it will give proper message. Successful 2. Delete button Button This deletes the details of the book by using Register No. Successful 3. Update Button Modified records are updated in database. Successful 4. Search Button Displays the details of issued book. Otherwise give proper error message. Successful 5. Clear Button Clear all fields. Successful 6. Exit Button Exit from the application. Successful 7. Print Button Print the details of issued book. Successful 8. Next Button Next page is displayed. Successful Book Return SN Test Cases Expected Result Test Result On Click of 1. Add Button At first, user have to fill all fields with valid data, if any error like entering text data instead of number or entering number instead of text is found, then it gives proper message, otherwise adds Return Record to the database. Successful 2. Delete button Button This deletes the details of the book by using Register No. Successful 3. Update Button Modified records are updated in database. Successful 4. Search Button Displays the details of issued book. Otherwise give proper error message. Successful 5. Clear Button Clear all fields. Successful 6. Exit Button Exit from the application. Successful 7. Print Button Print the details of returned book. Successful 8. Next Button Next page is displayed. Successful","title":"Software Testing"},{"location":"development-process-management/software-testing/#why","text":"To find errors. To ensure that software delivered does not have defects. Post removal of bugs is expensive. Buggy software can be harmful to data, property and life. To improve quality, thus having good business and trust. To ensure all the product functionalities work as per the specification.","title":"Why ?"},{"location":"development-process-management/software-testing/#how","text":"","title":"How ?"},{"location":"development-process-management/software-testing/#on-basis-of-resource-involved","text":"Manual testing Automated testing","title":"On basis of Resource Involved"},{"location":"development-process-management/software-testing/#on-basis-of-orientation","text":"Demonstration Oriented Testing - Optimisitic / Positive Approach Destruction Oriented Testing - Pessimistic / Negative Approach Debugging Oriented Testing - Debugging Approach","title":"On basis of Orientation"},{"location":"development-process-management/software-testing/#levels-of-software-testing","text":"Unit Testing Component Testing Integration Testing System Testing Acceptance Testing","title":"Levels of Software Testing"},{"location":"development-process-management/software-testing/#when","text":"Until BUDGET , TIME and QUALITY are satisfied.","title":"When ?"},{"location":"development-process-management/software-testing/#principles-patteed","text":"Testing Shows Presence of Bugs Shows presence Cannot prove absence Helps to find undiscovered defects. Exhaustive Testing is impossible Impossible to test all possible input combinations. Smarter way should be adopted. Early Testing Start as soon as possible. finding defects early saves a lot of money than finding it later. Defect Clustering Equal distribution of bugs across the module is not possible. Defect may be clustered in small peice of code/module. Pesticide Paradox Executing same tests again and again will not help to identify more bugs. Review them regularly and modify if changes required. Absence of Error Fallacy Finding and fixing many bugs doesn't help. If if doesnot meed users requirement, it is not useful. Testing is Context Dependent Different software are tested in different contexts. Eg: Testing in a browser, testing in a server, testing in a mobile app. Eg: Testing for a banking sofware is different from testing for a web application.","title":"Principles - [PATTEED]"},{"location":"development-process-management/software-testing/#verification-and-validation","text":"Verification Validation It includes checking documents, design, codes and programs. It includes testing and validating the actual product. Verification is the static testing. Validation is the dynamic testing. It does not include the execution of the code. It includes the execution of the code. Methods used in verification are reviews, walkthroughs, inspections and desk-checking. Methods used in validation are Black Box Testing, White Box Testing and non-functional testing. It checks whether the software conforms to specifications or not. It checks whether the software meets the requirements and expectations of a customer or not. It can find the bugs in the early stage of the development. It can only find the bugs that could not be found by the verification process. The goal of verification is application and software architecture and specification. The goal of validation is an actual product. Quality assurance team does verification. Validation is executed on software code with the help of testing team. It comes before validation. It comes after verification. It consists of checking of documents/files and is performed by human. It consists of execution of program and is performed by computer.","title":"Verification and Validation"},{"location":"development-process-management/software-testing/#test-cases","text":"A test case is a set of actions performed on a system to determine if it satisfies software requirements and functions correctly. The purpose of a test case is to determine if different features within a system are performing as expected and to confirm that the system satisfies all related standards, guidelines and customer requirements. The process of writing a test case can also help reveal errors or defects within the system. Test cases are typically written by members of the quality assurance (QA) team or the testing team and can be used as step-by-step instructions for each system test. Testing begins once the development team has finished a system feature or set of features. A sequence or collection of test cases is called a test suite .","title":"Test Cases"},{"location":"development-process-management/software-testing/#benefits","text":"Guaranteed good test coverage. Reduced maintenance and software support costs. Reusable test cases. Confirmation that the software satisfies end-user requirements. Improved quality of software and user experience. Higher quality products lead to more satisfied customers. More satisfied customers will increase company profits.","title":"Benefits"},{"location":"development-process-management/software-testing/#test-cases_1","text":"","title":"Test Cases"},{"location":"development-process-management/software-testing/#book-issue","text":"SN Test Cases Expected Result Test Result On Click of 1. Add Button At first, user have to fill all fields with valid data, if the accession number book is already issued, then it will give proper message. Successful 2. Delete button Button This deletes the details of the book by using Register No. Successful 3. Update Button Modified records are updated in database. Successful 4. Search Button Displays the details of issued book. Otherwise give proper error message. Successful 5. Clear Button Clear all fields. Successful 6. Exit Button Exit from the application. Successful 7. Print Button Print the details of issued book. Successful 8. Next Button Next page is displayed. Successful","title":"Book Issue"},{"location":"development-process-management/software-testing/#book-return","text":"SN Test Cases Expected Result Test Result On Click of 1. Add Button At first, user have to fill all fields with valid data, if any error like entering text data instead of number or entering number instead of text is found, then it gives proper message, otherwise adds Return Record to the database. Successful 2. Delete button Button This deletes the details of the book by using Register No. Successful 3. Update Button Modified records are updated in database. Successful 4. Search Button Displays the details of issued book. Otherwise give proper error message. Successful 5. Clear Button Clear all fields. Successful 6. Exit Button Exit from the application. Successful 7. Print Button Print the details of returned book. Successful 8. Next Button Next page is displayed. Successful","title":"Book Return"},{"location":"development-process-management/source-code-management/","text":"A source code management ( SCM ) isa tool for managing a collection of a program code that provides you with 3 important capabilities. Reversivibility Concurrency Annotations It is synonymously also known as Version Control System ( VCS ). VCS is the combination of technologies and practices for tracking and controlling process to a project files in particular to source code, documentation, and other related artifacts. VCS helps with almost all aspects of a project, including: - Version control - Tracking changes to the source code - Inter Developer Communication - Release Management - Bug Management Benefits Complete version history More effective collaboration Workflow automation Better communnication Graphic displays of code history Generate release notes Code Backup Types of VCS Centralized Version Control System Distributed Version Control System Centralized Version Control System Benefits It is easy to understand and get started. You have more conrol over users and access ( since it is served from one place ). Drawbacks Dependent on access to the server. Hard to manage a server and backups. It can be slower because every command connects to the server. Branching and merging tools are difficult to use. Distributed Version Control System Benefits Each user has their own copy of the entire repository, not just the files but the history as well as so it is fast. More powerful and detailed change tracking which means less conflict. No server necessary, all actions except sharing repository, are local (offline commit). Branching and merging is more reliable. Drawbacks The distributed model is harder to understand. Difference between Centralized and Distributed VCS Centralized VCS Distributed VCS It is the form of version control in which the central repository of the server provides the latest code to the client machines. It is the form of version control where the complete codebase (including its full history) is mirrored on every developer's computer. There are no local repositories. There are local repositories. Works comparatively slower. Works faster. Always require internet connectivity. Developers can work with a local repository without an internet connection. Focuses on sunchronizing, tracking and backing up files. Focuses on sharing changes. A failure in the central server terminates all the versions. Eg: If the central server is down, all the developers will be unable to access the repository. A failure in the main server does not affect the development. Eg: If the central server is down, all the developers will be able to access the repository. Eg: Mercurial Eg: Git Key Index: Definition, Local Repostiory, Speed, Internet Connection, Main Focus, Failure, Example, Figure etc.","title":"Source Code Management"},{"location":"development-process-management/source-code-management/#benefits","text":"Complete version history More effective collaboration Workflow automation Better communnication Graphic displays of code history Generate release notes Code Backup","title":"Benefits"},{"location":"development-process-management/source-code-management/#types-of-vcs","text":"Centralized Version Control System Distributed Version Control System","title":"Types of VCS"},{"location":"development-process-management/source-code-management/#centralized-version-control-system","text":"","title":"Centralized Version Control System"},{"location":"development-process-management/source-code-management/#benefits_1","text":"It is easy to understand and get started. You have more conrol over users and access ( since it is served from one place ).","title":"Benefits"},{"location":"development-process-management/source-code-management/#drawbacks","text":"Dependent on access to the server. Hard to manage a server and backups. It can be slower because every command connects to the server. Branching and merging tools are difficult to use.","title":"Drawbacks"},{"location":"development-process-management/source-code-management/#distributed-version-control-system","text":"","title":"Distributed Version Control System"},{"location":"development-process-management/source-code-management/#benefits_2","text":"Each user has their own copy of the entire repository, not just the files but the history as well as so it is fast. More powerful and detailed change tracking which means less conflict. No server necessary, all actions except sharing repository, are local (offline commit). Branching and merging is more reliable.","title":"Benefits"},{"location":"development-process-management/source-code-management/#drawbacks_1","text":"The distributed model is harder to understand.","title":"Drawbacks"},{"location":"development-process-management/source-code-management/#difference-between-centralized-and-distributed-vcs","text":"Centralized VCS Distributed VCS It is the form of version control in which the central repository of the server provides the latest code to the client machines. It is the form of version control where the complete codebase (including its full history) is mirrored on every developer's computer. There are no local repositories. There are local repositories. Works comparatively slower. Works faster. Always require internet connectivity. Developers can work with a local repository without an internet connection. Focuses on sunchronizing, tracking and backing up files. Focuses on sharing changes. A failure in the central server terminates all the versions. Eg: If the central server is down, all the developers will be unable to access the repository. A failure in the main server does not affect the development. Eg: If the central server is down, all the developers will be able to access the repository. Eg: Mercurial Eg: Git Key Index: Definition, Local Repostiory, Speed, Internet Connection, Main Focus, Failure, Example, Figure etc.","title":"Difference between Centralized and Distributed VCS"},{"location":"extra/abbreviations/","text":"Acronym Full Form SOAP Simple Object Access Protocol REST REpresentational State Transfer GEAF Government Enterprise Architecture Framework XML Extensible Markup Language JSON JavaScript Object Notation HTML Hypertext Markup Language CSS Cascading Style Sheet JS JavaScript RDF Resource Description Framework SOA Service Oriented Architecture ROA Resource Oriented Architecture WSDL Web Service Description Language UDDI Universal Description Discovery and Integration ebXML Electronic Business XML XSD XML Schema Definition XMLNS XML Namespace XSI XML Schema Instance UML Unified Modeling Language MVC Model View Controller MVVM Model View View Model XSS Cross Site Scripting CSRF Cross Site Request Forgery OAuth Open Auth SQL Structured Query Language JPA Java Persistence API DDD Domain Driven Design TDD Test Driven Development BDD Behavior Driven Development DI Dependency Injection IOC Inversion of Control FP Factory Pattern SP Singleton Pattern LIP Lazy Initialization Pattern DP Design Patterns JDBC Java Database Connectivity ODBC Open Database Connectivity JDK Java Development Kit JRE Java Runtime Environment JVM Java Virtual Machine J2EE Java 2 Enterprise Edition J2SE Java 2 Standard Edition J2ME Java 2 Micro Edition POJO Plain Old Java Object POCO Plain Old CLR Object CLR Common Language Runtime DDL Data Definition Language DML Data Manipulation Language DCL Data Control Language VCS Version Control System SVN Subversion SCM Source Code Management","title":"Abbreviations"},{"location":"extra/questions/http-state/","text":"HTTP is a stateless protocol. A stateless protocol doesn't require server to retain information or status about each use for the duration of the multiple request. HTTP has HTTP cookies. Cookies allow the server to track the user state, the number of connections and last connection etc. HTTP has a persistent connection( keep-alive ) where several request can be sent from the same TCP connection. But some web apps may have to track the users progress from page to page. Solutions for these cases: Use of HTTP cookies Server side sessions Hidden variables URL-rewriting using URL encoded parameters.","title":"Http state"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/","text":"Frameworks help people to organize and assess completeness of integrated models of their enterprises. An Architectural Framework gives a skeletal structures that defines suggested architectural artifacts, describes ow those artifacts are related to each other and provides generic definition for what those artifacts might look like. How to create and use an enterprise architecture ? Principles and practices for creating and using architectural description of the system. Purposes of Frameworks Organize integrated models of an enterprise. Assess completeness of the descriptive representation of an enterprise. Understand an organization of a system. Assist in identification and categorization. Help to manage complexity. Identify the flow of money in the enterprise. Provide a communication mechanism. Zachman Enterprise Architecture Framework Generic Diagram Empty Zachman Framework It is an EAD which provides an formal and highly structured way of viewing and defining an enterprise. It is an schema for organizing architectural artifacts( design documents, specifications, modes ) that takes into account both, whom the artifacts targets ( business owner, builder ) and what particular issue ( data, functioning ) is being addressed. ROWS and COLUMNS are the basic units of the framework. ROWS describes the different ( perspectives, views, roles ) of the enterprise. Architecture Scope Context Scope describes the system's vision, missions, boundaries, architecture and constraints. The scope states what the system is trying to achieve. It is called a black box model, because we see the inputs and outputs of the system, but not the internal workings of the system. Business Model It shows goals, strategies and processess that are used to support the mission of the organization. System Model It contains requirements, objects, activities and functiona that implement the business model. Tech Model It contains the constraints of human, tools, hardware, software and network that implements the system model. Detailed Representation It presents individual, independent components that can be allocated to contracters for implementation. Real System It depicts the operational system under consideration. GEAF Government Enterprise Architecture Framework It promotes consistency in the government models and its business process, services and infrastructure. It guides our transformation towards coherent (\u0938\u0902\u0938\u0915\u094d\u0924) digital governement. It guides an organization transition to work in connected and digital world. It provides a unifying common language. Categorizes and describes the business processes and services. Categorizes and describes the relevant standards and guidelines. Defines set of refernce models and patterns. Defines and identifies government business capabilities. Components A layer architecture framework Reference architectures Toolkits and Guidelines GEA Standard Refernce Benefits Helps in to understand your current business. Identify opportunities for change. Model your business goals and the capabilities and investments you need to deliver them. Design a future operating model that is technically and strategically aligned with all of government\u2019s programs and services. Architecture Resources Governance and Maturity Tools Information: Discovery Process guidelines and templates Information: Assets Catalogue Template","title":"Enterprise Architecture Framework"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#purposes-of-frameworks","text":"Organize integrated models of an enterprise. Assess completeness of the descriptive representation of an enterprise. Understand an organization of a system. Assist in identification and categorization. Help to manage complexity. Identify the flow of money in the enterprise. Provide a communication mechanism.","title":"Purposes of Frameworks"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#zachman-enterprise-architecture-framework","text":"Generic Diagram Empty Zachman Framework It is an EAD which provides an formal and highly structured way of viewing and defining an enterprise. It is an schema for organizing architectural artifacts( design documents, specifications, modes ) that takes into account both, whom the artifacts targets ( business owner, builder ) and what particular issue ( data, functioning ) is being addressed. ROWS and COLUMNS are the basic units of the framework. ROWS describes the different ( perspectives, views, roles ) of the enterprise.","title":"Zachman Enterprise Architecture Framework"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#architecture","text":"","title":"Architecture"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#scope-context","text":"Scope describes the system's vision, missions, boundaries, architecture and constraints. The scope states what the system is trying to achieve. It is called a black box model, because we see the inputs and outputs of the system, but not the internal workings of the system.","title":"Scope Context"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#business-model","text":"It shows goals, strategies and processess that are used to support the mission of the organization.","title":"Business Model"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#system-model","text":"It contains requirements, objects, activities and functiona that implement the business model.","title":"System Model"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#tech-model","text":"It contains the constraints of human, tools, hardware, software and network that implements the system model.","title":"Tech Model"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#detailed-representation","text":"It presents individual, independent components that can be allocated to contracters for implementation.","title":"Detailed Representation"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#real-system","text":"It depicts the operational system under consideration.","title":"Real System"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#geaf","text":"Government Enterprise Architecture Framework It promotes consistency in the government models and its business process, services and infrastructure. It guides our transformation towards coherent (\u0938\u0902\u0938\u0915\u094d\u0924) digital governement. It guides an organization transition to work in connected and digital world. It provides a unifying common language. Categorizes and describes the business processes and services. Categorizes and describes the relevant standards and guidelines. Defines set of refernce models and patterns. Defines and identifies government business capabilities.","title":"GEAF"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#components","text":"A layer architecture framework Reference architectures Toolkits and Guidelines GEA Standard Refernce","title":"Components"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#benefits","text":"Helps in to understand your current business. Identify opportunities for change. Model your business goals and the capabilities and investments you need to deliver them. Design a future operating model that is technically and strategically aligned with all of government\u2019s programs and services.","title":"Benefits"},{"location":"introduction/enterprise-application-architecture/enterprise-application-framework/#architecture-resources","text":"Governance and Maturity Tools Information: Discovery Process guidelines and templates Information: Assets Catalogue Template","title":"Architecture Resources"},{"location":"introduction/enterprise-application-architecture/introduction/","text":"\u270d Arjun Adhikari , Django & Python Developer Enterprise app development is the process of creating applications for large businesses that are customized to their complex business requirements. These applications can be deployed on the cloud across a variety of platforms and networks. Enterprise Enterprise essentially means that the company has multiple levels, locations, division or departments that all collborate to achieve big picture business objectives. For eg: Customer Relationship Management (CRM) is often referred as enterprise application (large scale business). Enterprise Application It is an application that a business uses to support the organization in order to solve enterprise problem. It denotes a software platform that is quite complex and comparatively huge for small business. Enterprise application demands high requirements in terms of security. User access and maintainence [application for large scale business]. Technologies used to develop Enterprise Application User Interface layer (Presentation Layer) - AWT, Swing, HTML, ISP, Velocity Framework Business Processing Layer - Servlets, JSP, EJB Data Storage and Access Layer (Persistence Layer) - JDBC, EJB For eg: Java provides the enterprise solutions whereas its editions serve different purposes. J2SE - Introduction, OOP, String Manipulation J2EE - Servlets, EJB, Middleware Service, JSP J2ME - Wireless Messaging, Mobile XML etc. Java is widely used for developing enterprise applications (EA) because: Learning Curve Java has a vast array of libraries, frameworks, tools and server provider. Platform indeependence. Maturity Java ensures security, stability, robustness, high performance etc. Example of Enterprise Application Customer Relationship Management (CRM) Automated Billing System Enterprise Resource Planning HR Management Framework A framework is a real or conceptual structure intended to serve as a support or guide for the building of something. In computer systems, a framework is often a layered structure indicating what kind of programs, can should built and how they would interact. Enterprise Application vs Desktop Application vs Web Application a. Desktop Application Runs on single tier architecture. All the presentation logic, business logic and data storage and access logic resides in a single machine. Morever, it can be part of network but the application and its database stay in the same machine. It doesn't support multiple users concurrently. b. Enterprise Application It normally includes more than a single tier. Multiple users can access the application at the same time. (Multiple concurrent users) It have client tier (java client, browser, mobile based client), representation tier (JSP), business logic tier (EJB), and data storage and access tier (JDBC). It can be distributed system. It can be a web application or a desktop application. c. Web Application It is a web application that runs on a web server. Web applications runs on a web server like Tomcat whereas desktop applications runs on a desktop machine and enterprise applications runs on a application server like Glassfish. Web applications can be accessed by any browser. It needs internet access to run.","title":"Introduction"},{"location":"introduction/enterprise-application-architecture/introduction/#enterprise","text":"Enterprise essentially means that the company has multiple levels, locations, division or departments that all collborate to achieve big picture business objectives. For eg: Customer Relationship Management (CRM) is often referred as enterprise application (large scale business).","title":"Enterprise"},{"location":"introduction/enterprise-application-architecture/introduction/#enterprise-application","text":"It is an application that a business uses to support the organization in order to solve enterprise problem. It denotes a software platform that is quite complex and comparatively huge for small business. Enterprise application demands high requirements in terms of security. User access and maintainence [application for large scale business].","title":"Enterprise Application"},{"location":"introduction/enterprise-application-architecture/introduction/#technologies-used-to-develop-enterprise-application","text":"User Interface layer (Presentation Layer) - AWT, Swing, HTML, ISP, Velocity Framework Business Processing Layer - Servlets, JSP, EJB Data Storage and Access Layer (Persistence Layer) - JDBC, EJB For eg: Java provides the enterprise solutions whereas its editions serve different purposes. J2SE - Introduction, OOP, String Manipulation J2EE - Servlets, EJB, Middleware Service, JSP J2ME - Wireless Messaging, Mobile XML etc. Java is widely used for developing enterprise applications (EA) because: Learning Curve Java has a vast array of libraries, frameworks, tools and server provider. Platform indeependence. Maturity Java ensures security, stability, robustness, high performance etc.","title":"Technologies used to develop Enterprise Application"},{"location":"introduction/enterprise-application-architecture/introduction/#example-of-enterprise-application","text":"Customer Relationship Management (CRM) Automated Billing System Enterprise Resource Planning HR Management","title":"Example of Enterprise Application"},{"location":"introduction/enterprise-application-architecture/introduction/#framework","text":"A framework is a real or conceptual structure intended to serve as a support or guide for the building of something. In computer systems, a framework is often a layered structure indicating what kind of programs, can should built and how they would interact.","title":"Framework"},{"location":"introduction/enterprise-application-architecture/introduction/#enterprise-application-vs-desktop-application-vs-web-application","text":"a. Desktop Application Runs on single tier architecture. All the presentation logic, business logic and data storage and access logic resides in a single machine. Morever, it can be part of network but the application and its database stay in the same machine. It doesn't support multiple users concurrently. b. Enterprise Application It normally includes more than a single tier. Multiple users can access the application at the same time. (Multiple concurrent users) It have client tier (java client, browser, mobile based client), representation tier (JSP), business logic tier (EJB), and data storage and access tier (JDBC). It can be distributed system. It can be a web application or a desktop application. c. Web Application It is a web application that runs on a web server. Web applications runs on a web server like Tomcat whereas desktop applications runs on a desktop machine and enterprise applications runs on a application server like Glassfish. Web applications can be accessed by any browser. It needs internet access to run.","title":"Enterprise Application vs Desktop Application vs Web Application"},{"location":"introduction/enterprise-application-architecture/platform-for-enterprise-solutions/","text":"Entity Java Bean (EJB) It is used to develop scalable, robust, secured enterprise applications using Java. It is a server side component that enccapsulates the business lofic of an application. The business logic is the code that fulfills the purpose of the pplication. For eg: In an inventory control application, the enterprise beans might implement the business logic in methods called checkInventoryLevel and orderProduct. By invoking these methods, clients can access the inventory services provided by the application. Benefits of EJB EJB simplify the development of large distributed system. EJB Container provides system level services to enterprise beans. It is responsible for system level services like transaction management, security, and so on. EJB Beans are portable components EJB Container EJB Container provides the following services to enterprise beans: Transaction management Security Concurrent access control Logging Monitoring Performance monitoring etc. Types of Enterprise Beans Classification Sub Classification 1. Session Bean a. Stateless Session Bean b. Stateful Session Bean c. Singleton Session Bean 2. Entity Bean a. Stateless Entity Bean a. BMP (Bean Managed Persistence) b. CMP (Container Managed Persistence) 3. Message Driven Bean None","title":"Platform for Enterprise Solutions"},{"location":"introduction/enterprise-application-architecture/platform-for-enterprise-solutions/#entity-java-bean-ejb","text":"It is used to develop scalable, robust, secured enterprise applications using Java. It is a server side component that enccapsulates the business lofic of an application. The business logic is the code that fulfills the purpose of the pplication. For eg: In an inventory control application, the enterprise beans might implement the business logic in methods called checkInventoryLevel and orderProduct. By invoking these methods, clients can access the inventory services provided by the application.","title":"Entity Java Bean (EJB)"},{"location":"introduction/enterprise-application-architecture/platform-for-enterprise-solutions/#benefits-of-ejb","text":"EJB simplify the development of large distributed system. EJB Container provides system level services to enterprise beans. It is responsible for system level services like transaction management, security, and so on. EJB Beans are portable components","title":"Benefits of EJB"},{"location":"introduction/enterprise-application-architecture/platform-for-enterprise-solutions/#ejb-container","text":"EJB Container provides the following services to enterprise beans: Transaction management Security Concurrent access control Logging Monitoring Performance monitoring etc.","title":"EJB Container"},{"location":"introduction/enterprise-application-architecture/platform-for-enterprise-solutions/#types-of-enterprise-beans","text":"Classification Sub Classification 1. Session Bean a. Stateless Session Bean b. Stateful Session Bean c. Singleton Session Bean 2. Entity Bean a. Stateless Entity Bean a. BMP (Bean Managed Persistence) b. CMP (Container Managed Persistence) 3. Message Driven Bean None","title":"Types of Enterprise Beans"},{"location":"introduction/web-technologies-concepts/communication-types/","text":"GET Requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. Note that query strings (name/value pairs) is sent in the URL of a GET request: e.g. /test/demo_form.php?name1=value1&name2=value2 Key Points to Remember: - GET requests can be cached - GET requests remain in the browser history - GET requests can be bookmarked - GET requests should never be used when dealing with sensitive data - GET requests have length restrictions - GET requests should be used only to retrieve data POST Requests that the server accept the entity enclosed in the request as a new resource. The data is typically sent in the body of the request. Note that query strings (name/value pairs) is sent in the HTTP message body of a POST request: POST /test/demo_form.asp HTTP/1.1 Host: w3schools.com name1=value1&name2=value2 Key Points to Remember: - POST requests are never cached - POST requests do not remain in the browser history - POST requests cannot be bookmarked - POST requests have no restrictions on data length GET OR POST ? GET POST Back Button / Reload Harmless Data will be re-submitted (the browser should alert the user that the data are about to be re-submitted) Bookmark Can be bookmarked Cannot be bookmarked Cache Can be cached Cannot be cached Encoding Type application/x-www-form-urlencoded application/x-www-form-urlencoded or multipart/form-data . Use multipart encoding for binary data. History Parameters remain in browser history Parameters do not get saved in browser history Restriction on Data Length Yes, when sending data, the GET method adds the data to the URL; and the length of a URL is limited (maximum URL length is 2048 characters) No restrictions Restriction on Data Type Only ASCII characters allowed No restrictions. Binary data is also allowed Security GET is less secure compared to POST because data sent is part of the URL Never use GET when sending passwords or other sensitive information POST is a little safer than GET because the parameters arenot stored in browser historyor in web server logs. Visibility Data is visible to everyone in the URL Data is not displayed in the URL PUT Requests that the enclosed entity be stored under the specified URI. If the URI refers to an already existing resource, it is modified; otherwise, a new resource is created. If the URI does not point to an existing resource, then the server can create the resource with that URI. Use the HTTP PUT method when : - The client includes all aspect of the resource including the unique identifier to uniquely identify the resource. Example: creating a new employee. - The client provides all the information for a resource to be able to modify that resource. This implies that the server side does not update any aspect of the resource (such as an update date). Use the HTTP POST method when: - The server will provide some information concerning the newly created resource. For example, take a logging system. A new entry in the log will most likely have a numbering scheme which is determined on the server side. Upon creating a new log entry, the new sequence number will be determined by the server and not by the client. - On a modification of a resource, the server will provide such information as a resource state or an update date. Again in this case not all information was provided by the client and the resource will be changing from one modification request to the next. Hence a non-idempotent operation. DELETE Requests that the server delete the resource identified by the Request-URI. HEAD Requests that the server send back a HEAD response identical to that of a GET request, but without the response body. PATCH Requests that a set of changes described in the request entity be applied to the resource identified by the Request-URI. OPTIONS Requests that the server send back a collection of options and information about the resource identified by the Request-URI.","title":"Communication Types"},{"location":"introduction/web-technologies-concepts/communication-types/#get","text":"Requests a representation of the specified resource. Requests using GET should only retrieve data and should have no other effect. Note that query strings (name/value pairs) is sent in the URL of a GET request: e.g. /test/demo_form.php?name1=value1&name2=value2 Key Points to Remember: - GET requests can be cached - GET requests remain in the browser history - GET requests can be bookmarked - GET requests should never be used when dealing with sensitive data - GET requests have length restrictions - GET requests should be used only to retrieve data","title":"GET"},{"location":"introduction/web-technologies-concepts/communication-types/#post","text":"Requests that the server accept the entity enclosed in the request as a new resource. The data is typically sent in the body of the request. Note that query strings (name/value pairs) is sent in the HTTP message body of a POST request: POST /test/demo_form.asp HTTP/1.1 Host: w3schools.com name1=value1&name2=value2 Key Points to Remember: - POST requests are never cached - POST requests do not remain in the browser history - POST requests cannot be bookmarked - POST requests have no restrictions on data length","title":"POST"},{"location":"introduction/web-technologies-concepts/communication-types/#get-or-post","text":"GET POST Back Button / Reload Harmless Data will be re-submitted (the browser should alert the user that the data are about to be re-submitted) Bookmark Can be bookmarked Cannot be bookmarked Cache Can be cached Cannot be cached Encoding Type application/x-www-form-urlencoded application/x-www-form-urlencoded or multipart/form-data . Use multipart encoding for binary data. History Parameters remain in browser history Parameters do not get saved in browser history Restriction on Data Length Yes, when sending data, the GET method adds the data to the URL; and the length of a URL is limited (maximum URL length is 2048 characters) No restrictions Restriction on Data Type Only ASCII characters allowed No restrictions. Binary data is also allowed Security GET is less secure compared to POST because data sent is part of the URL Never use GET when sending passwords or other sensitive information POST is a little safer than GET because the parameters arenot stored in browser historyor in web server logs. Visibility Data is visible to everyone in the URL Data is not displayed in the URL","title":"GET OR POST ?"},{"location":"introduction/web-technologies-concepts/communication-types/#put","text":"Requests that the enclosed entity be stored under the specified URI. If the URI refers to an already existing resource, it is modified; otherwise, a new resource is created. If the URI does not point to an existing resource, then the server can create the resource with that URI. Use the HTTP PUT method when : - The client includes all aspect of the resource including the unique identifier to uniquely identify the resource. Example: creating a new employee. - The client provides all the information for a resource to be able to modify that resource. This implies that the server side does not update any aspect of the resource (such as an update date). Use the HTTP POST method when: - The server will provide some information concerning the newly created resource. For example, take a logging system. A new entry in the log will most likely have a numbering scheme which is determined on the server side. Upon creating a new log entry, the new sequence number will be determined by the server and not by the client. - On a modification of a resource, the server will provide such information as a resource state or an update date. Again in this case not all information was provided by the client and the resource will be changing from one modification request to the next. Hence a non-idempotent operation.","title":"PUT"},{"location":"introduction/web-technologies-concepts/communication-types/#delete","text":"Requests that the server delete the resource identified by the Request-URI.","title":"DELETE"},{"location":"introduction/web-technologies-concepts/communication-types/#head","text":"Requests that the server send back a HEAD response identical to that of a GET request, but without the response body.","title":"HEAD"},{"location":"introduction/web-technologies-concepts/communication-types/#patch","text":"Requests that a set of changes described in the request entity be applied to the resource identified by the Request-URI.","title":"PATCH"},{"location":"introduction/web-technologies-concepts/communication-types/#options","text":"Requests that the server send back a collection of options and information about the resource identified by the Request-URI.","title":"OPTIONS"},{"location":"introduction/web-technologies-concepts/data-exchange-formats/","text":"XML Extensible Markup Langugae XML doesnot do anything. It is just an information wrapped in tags. XMl was designed to carry data like HTML is to display data. XMl tags are not predefined like HTML tags. Rules All XML tags are case sensitive. XMl elements must be properly nested. XML attributes values nust be quoted. Each XML tags needs to be strictly closed with a close tag whereas the rule is not strict in HTML. Example <country> <name> Nepal </name> <capital> Kathmandu </capital> <region> South Asia </region> <neighbor> India </neighbor> </country> JSON JavaScript Object Notation It is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language. Rules JSON is case sensitive. JSON uses double quotes (\") instead of single quotes (') for string values. JSON uses a colon (:) instead of an equals (=) for key/value pairs. JSON uses a comma (,) instead of a semi-colon (;) for separating values. The key should be string, but the values can be any type like number, boolean, object, array, etc. Example { \"name\" : \"Nepal\" , \"capital\" : \"Kathmandu\" , \"region\" : \"South Asia\" , \"neighbor\" : \"India\" } JSON vs XML JSON XML It is JavaScript Object Notation It is Extensible markup language It is based on JavaScript language. It is derived from SGML. It is a way of representing objects. It is a markup language and uses tag structure to represent data items. It does not provides any support for namespaces. It supports namespaces. It supports array. It doesn\u2019t supports array. Its files are very easy to read as compared to XML. Its documents are comparatively difficult to read and interpret. It doesn\u2019t use end tag. It has start and end tags. It is less secured. It is more secured than JSON. It doesn\u2019t supports comments. It supports comments. It supports only UTF-8 encoding. It supports various encoding.","title":"Data Exchange Formats"},{"location":"introduction/web-technologies-concepts/data-exchange-formats/#xml","text":"Extensible Markup Langugae XML doesnot do anything. It is just an information wrapped in tags. XMl was designed to carry data like HTML is to display data. XMl tags are not predefined like HTML tags.","title":"XML"},{"location":"introduction/web-technologies-concepts/data-exchange-formats/#rules","text":"All XML tags are case sensitive. XMl elements must be properly nested. XML attributes values nust be quoted. Each XML tags needs to be strictly closed with a close tag whereas the rule is not strict in HTML.","title":"Rules"},{"location":"introduction/web-technologies-concepts/data-exchange-formats/#example","text":"<country> <name> Nepal </name> <capital> Kathmandu </capital> <region> South Asia </region> <neighbor> India </neighbor> </country>","title":"Example"},{"location":"introduction/web-technologies-concepts/data-exchange-formats/#json","text":"JavaScript Object Notation It is a lightweight data-interchange format. It is easy for humans to read and write. It is easy for machines to parse and generate. It is based on a subset of the JavaScript Programming Language.","title":"JSON"},{"location":"introduction/web-technologies-concepts/data-exchange-formats/#rules_1","text":"JSON is case sensitive. JSON uses double quotes (\") instead of single quotes (') for string values. JSON uses a colon (:) instead of an equals (=) for key/value pairs. JSON uses a comma (,) instead of a semi-colon (;) for separating values. The key should be string, but the values can be any type like number, boolean, object, array, etc.","title":"Rules"},{"location":"introduction/web-technologies-concepts/data-exchange-formats/#example_1","text":"{ \"name\" : \"Nepal\" , \"capital\" : \"Kathmandu\" , \"region\" : \"South Asia\" , \"neighbor\" : \"India\" }","title":"Example"},{"location":"introduction/web-technologies-concepts/data-exchange-formats/#json-vs-xml","text":"JSON XML It is JavaScript Object Notation It is Extensible markup language It is based on JavaScript language. It is derived from SGML. It is a way of representing objects. It is a markup language and uses tag structure to represent data items. It does not provides any support for namespaces. It supports namespaces. It supports array. It doesn\u2019t supports array. Its files are very easy to read as compared to XML. Its documents are comparatively difficult to read and interpret. It doesn\u2019t use end tag. It has start and end tags. It is less secured. It is more secured than JSON. It doesn\u2019t supports comments. It supports comments. It supports only UTF-8 encoding. It supports various encoding.","title":"JSON vs XML"},{"location":"introduction/web-technologies-concepts/data-format-conversion/","text":"JSON to XML - Example 1 { \"menu\" : { \"id\" : \"file\" , \"value\" : \"File\" , \"popup\" : { \"menuitem\" : [{ \"value\" : \"New\" , \"onclick\" : \"CreateNewDoc()\" }, { \"value\" : \"Open\" , \"onclick\" : \"openDoc()\" }, { \"value\" : \"Close\" , \"onclick\" : \"CloseDoc()\" } ] } } } The equivalent XML conversion for the above JSON content is : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <menu> <id> file </id> <value> File </value> <popup> <menuitem> <value> New </value> <onclick> CreateNewDoc() </onclick> </menuitem> <menuitem> <value> Open </value> <onclick> openDoc() </onclick> </menuitem> <menuitem> <value> Close </value> <onclick> CloseDoc() </onclick> </menuitem> </popup> </menu> XML to JSON - Example 2 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <employees> <employee> <firstname> John </firstname> <lastname> Doe </lastname> <age> 30 </age> </employee> <employee> <firstname> Anna </firstname> <lastname> Smith </lastname> <age> 25 </age> </employee> <employee> <firstname> Peter </firstname> <lastname> Jones </lastname> <age> 35 </age> </employee> </employees> The equivalent JSON conversion for the above XML content is : { \"employees\" :[ { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" , \"age\" : 30 }, { \"firstname\" : \"Anna\" , \"lastname\" : \"Smith\" , \"age\" : 25 }, { \"firstname\" : \"Peter\" , \"lastname\" : \"Jones\" , \"age\" : 35 } ] } XML to JSON - Example 3 This example includes the XML content with the list of order_line. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <order id= \"1234\" data= \"234234\" > <customer first_name= \"John\" last_name= \"Doe\" > <email> johndoe@gmail.com </email> <phone> 123456789 </phone> </customer> <content> <order_line item= \"H252\" quantity= \"2\" > <unit_price> 10.00 </unit_price> </order_line> <order_line item= \"H253\" quantity= \"1\" > <unit_price> 20.00 </unit_price> </order_line> </content> <credit_card number= \"1234123412341234\" expiry= \"12/12\" cvv= \"123\" type= \"VISA\" /> </order> The equivalent JSON conversion for the above XML content is : { \"order\" : { \"@id\" : \"1234\" , \"@data\" : \"234234\" , \"customer\" : { \"@first_name\" : \"John\" , \"@last_name\" : \"Doe\" , \"email\" : \"johndoe@gamil.com\" , \"phone\" : \"123456789\" }, \"content\" : { \"order_lines\" : [{ \"@item\" : \"H252\" , \"@quantity\" : \"2\" , \"unit_price\" : 10.00 }, { \"@item\" : \"H253\" , \"@quantity\" : \"1\" , \"unit_price\" : 20.00 }], \"credit_card\" : { \"@number\" : \"1234123412341234\" , \"@expiry\" : \"12/12\" , \"@cvv\" : \"123\" , \"@type\" : \"Visa\" } } } } JSON to XML - Example 4 { \"country\" : [{ \"name\" : \"Nepal\" , \"capital\" : \"Kathmandu\" , \"feature\" : \"Everest\" }, { \"name\" : \"India\" , \"capital\" : \"New Delhi\" , \"feature\" : \"Taj Mahal\" }, { \"name\" : \"China\" , \"capital\" : \"Beijing\" , \"feature\" : \"Great Wall\" } ] } The equivalent XML conversion for the above JSON content is : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <countries> <country> <name> Nepal </name> <capital> Kathmandu </capital> <feature> Everest </feature> </country> <country> <name> India </name> <capital> New Delhi </capital> <feature> Taj Mahal </feature> </country> <country> <name> China </name> <capital> Beijing </capital> <feature> Great Wall </feature> </country> </countries>","title":"Conversion between Data Exchange Formats"},{"location":"introduction/web-technologies-concepts/data-format-conversion/#json-to-xml-example-1","text":"{ \"menu\" : { \"id\" : \"file\" , \"value\" : \"File\" , \"popup\" : { \"menuitem\" : [{ \"value\" : \"New\" , \"onclick\" : \"CreateNewDoc()\" }, { \"value\" : \"Open\" , \"onclick\" : \"openDoc()\" }, { \"value\" : \"Close\" , \"onclick\" : \"CloseDoc()\" } ] } } } The equivalent XML conversion for the above JSON content is : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <menu> <id> file </id> <value> File </value> <popup> <menuitem> <value> New </value> <onclick> CreateNewDoc() </onclick> </menuitem> <menuitem> <value> Open </value> <onclick> openDoc() </onclick> </menuitem> <menuitem> <value> Close </value> <onclick> CloseDoc() </onclick> </menuitem> </popup> </menu>","title":"JSON to XML - Example 1"},{"location":"introduction/web-technologies-concepts/data-format-conversion/#xml-to-json-example-2","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <employees> <employee> <firstname> John </firstname> <lastname> Doe </lastname> <age> 30 </age> </employee> <employee> <firstname> Anna </firstname> <lastname> Smith </lastname> <age> 25 </age> </employee> <employee> <firstname> Peter </firstname> <lastname> Jones </lastname> <age> 35 </age> </employee> </employees> The equivalent JSON conversion for the above XML content is : { \"employees\" :[ { \"firstname\" : \"John\" , \"lastname\" : \"Doe\" , \"age\" : 30 }, { \"firstname\" : \"Anna\" , \"lastname\" : \"Smith\" , \"age\" : 25 }, { \"firstname\" : \"Peter\" , \"lastname\" : \"Jones\" , \"age\" : 35 } ] }","title":"XML to JSON - Example 2"},{"location":"introduction/web-technologies-concepts/data-format-conversion/#xml-to-json-example-3","text":"This example includes the XML content with the list of order_line. <?xml version=\"1.0\" encoding=\"UTF-8\"?> <order id= \"1234\" data= \"234234\" > <customer first_name= \"John\" last_name= \"Doe\" > <email> johndoe@gmail.com </email> <phone> 123456789 </phone> </customer> <content> <order_line item= \"H252\" quantity= \"2\" > <unit_price> 10.00 </unit_price> </order_line> <order_line item= \"H253\" quantity= \"1\" > <unit_price> 20.00 </unit_price> </order_line> </content> <credit_card number= \"1234123412341234\" expiry= \"12/12\" cvv= \"123\" type= \"VISA\" /> </order> The equivalent JSON conversion for the above XML content is : { \"order\" : { \"@id\" : \"1234\" , \"@data\" : \"234234\" , \"customer\" : { \"@first_name\" : \"John\" , \"@last_name\" : \"Doe\" , \"email\" : \"johndoe@gamil.com\" , \"phone\" : \"123456789\" }, \"content\" : { \"order_lines\" : [{ \"@item\" : \"H252\" , \"@quantity\" : \"2\" , \"unit_price\" : 10.00 }, { \"@item\" : \"H253\" , \"@quantity\" : \"1\" , \"unit_price\" : 20.00 }], \"credit_card\" : { \"@number\" : \"1234123412341234\" , \"@expiry\" : \"12/12\" , \"@cvv\" : \"123\" , \"@type\" : \"Visa\" } } } }","title":"XML to JSON - Example 3"},{"location":"introduction/web-technologies-concepts/data-format-conversion/#json-to-xml-example-4","text":"{ \"country\" : [{ \"name\" : \"Nepal\" , \"capital\" : \"Kathmandu\" , \"feature\" : \"Everest\" }, { \"name\" : \"India\" , \"capital\" : \"New Delhi\" , \"feature\" : \"Taj Mahal\" }, { \"name\" : \"China\" , \"capital\" : \"Beijing\" , \"feature\" : \"Great Wall\" } ] } The equivalent XML conversion for the above JSON content is : <?xml version=\"1.0\" encoding=\"UTF-8\"?> <countries> <country> <name> Nepal </name> <capital> Kathmandu </capital> <feature> Everest </feature> </country> <country> <name> India </name> <capital> New Delhi </capital> <feature> Taj Mahal </feature> </country> <country> <name> China </name> <capital> Beijing </capital> <feature> Great Wall </feature> </country> </countries>","title":"JSON to XML - Example 4"},{"location":"introduction/web-technologies-concepts/protocols/","text":"Protocols are set of rules that help in governing the way a particular technology will function for communication. It defines standard for enabling the connection communication and data transfer between two computers on a network. It is a set of rules for message exchange among computers. Requirements Data formats for Data Exchange: Header | Data Address Format for Data Exchange Sender and Receiver Address are stored in Header Section Address Mapping Routing Detection of Transmission Errors Acknowledgement Loss of Information (Handling) Sequence Control Flow Control Types of Protocols Basis of State Stateless Protocol - HTTP , UDP Stateful Protocol - TCP , FTP Basis of Layer Transport Layer - TCP , UDP Application Layer - HTTP , FTP Some Protocols Transmission Control Protocol ( TCP ) Internet Protocol ( IP ) User Datagram Protocol ( UDP ) Post office Protocol ( POP ) Simple mail transport Protocol ( SMTP ) File Transfer Protocol ( FTP ) Hyper Text Transfer Protocol ( HTTP ) Hyper Text Transfer Protocol Secure ( HTTPS ) Telnet Transmission Control Protocol (TCP) TCP is a popular communication protocol which is used for communicating over a network. It divides any message into series of packets that are sent from source to destination and there it gets reassembled at the destination. Internet Protocol (IP) IP is designed explicitly as addressing protocol. It is mostly used with TCP. The IP addresses in packets help in routing them through different nodes in a network until it reaches the destination system. TCP/IP is the most popular protocol connecting the networks. User Datagram Protocol (UDP) UDP is a substitute communication protocol to Transmission Control Protocol implemented primarily for creating loss-tolerating and low-latency linking between different applications. Post office Protocol (POP) POP3 is designed for receiving incoming E-mails. Simple mail transport Protocol (SMTP) SMTP is designed to send and distribute outgoing E-Mail. File Transfer Protocol (FTP) FTP allows users to transfer files from one machine to another. Types of files may include program files, multimedia files, text files, and documents, etc. Hyper Text Transfer Protocol (HTTP) HTTP is designed for transferring a hypertext among two or more systems. HTML tags are used for creating links. These links may be in any form like text or images. HTTP is designed on Client-server principles which allow a client system for establishing a connection with the server machine for making a request. The server acknowledges the request initiated by the client and responds accordingly. How HTTP track the progress of the user from page to page? HTTP is a stateless protocol. A stateless protocol doesn't require server to retain information or status about each use for the duration of the multiple request. HTTP has HTTP cookies. Cookies allow the server to track the user state, the number of connections and last connection etc. HTTP has a persistent connection( keep-alive ) where several request can be sent from the same TCP connection. But some web apps may have to track the users progress from page to page. Solutions for these cases: Use of HTTP cookies Server side sessions Hidden variables URL-rewriting using URL encoded parameters. Hyper Text Transfer Protocol Secure (HTTPS) HTTPS is abbreviated as Hyper Text Transfer Protocol Secure is a standard protocol to secure the communication among two computers one using the browser and other fetching data from web server. HTTP is used for transferring data between the client browser (request) and the web server (response) in the hypertext format, same in case of HTTPS except that the transferring of data is done in an encrypted format. So it can be said that https thwart hackers from interpretation or modification of data throughout the transfer of packets. Telnet Telnet is a set of rules designed for connecting one system with another. The connecting process here is termed as remote login. The system which requests for connection is the local computer, and the system which accepts the connection is the remote compute","title":"Protocols"},{"location":"introduction/web-technologies-concepts/protocols/#requirements","text":"Data formats for Data Exchange: Header | Data Address Format for Data Exchange Sender and Receiver Address are stored in Header Section Address Mapping Routing Detection of Transmission Errors Acknowledgement Loss of Information (Handling) Sequence Control Flow Control","title":"Requirements"},{"location":"introduction/web-technologies-concepts/protocols/#types-of-protocols","text":"","title":"Types of Protocols"},{"location":"introduction/web-technologies-concepts/protocols/#basis-of-state","text":"Stateless Protocol - HTTP , UDP Stateful Protocol - TCP , FTP","title":"Basis of State"},{"location":"introduction/web-technologies-concepts/protocols/#basis-of-layer","text":"Transport Layer - TCP , UDP Application Layer - HTTP , FTP","title":"Basis of Layer"},{"location":"introduction/web-technologies-concepts/protocols/#some-protocols","text":"Transmission Control Protocol ( TCP ) Internet Protocol ( IP ) User Datagram Protocol ( UDP ) Post office Protocol ( POP ) Simple mail transport Protocol ( SMTP ) File Transfer Protocol ( FTP ) Hyper Text Transfer Protocol ( HTTP ) Hyper Text Transfer Protocol Secure ( HTTPS ) Telnet","title":"Some Protocols"},{"location":"introduction/web-technologies-concepts/protocols/#transmission-control-protocol-tcp","text":"TCP is a popular communication protocol which is used for communicating over a network. It divides any message into series of packets that are sent from source to destination and there it gets reassembled at the destination.","title":"Transmission Control Protocol (TCP)"},{"location":"introduction/web-technologies-concepts/protocols/#internet-protocol-ip","text":"IP is designed explicitly as addressing protocol. It is mostly used with TCP. The IP addresses in packets help in routing them through different nodes in a network until it reaches the destination system. TCP/IP is the most popular protocol connecting the networks.","title":"Internet Protocol (IP)"},{"location":"introduction/web-technologies-concepts/protocols/#user-datagram-protocol-udp","text":"UDP is a substitute communication protocol to Transmission Control Protocol implemented primarily for creating loss-tolerating and low-latency linking between different applications.","title":"User Datagram Protocol (UDP)"},{"location":"introduction/web-technologies-concepts/protocols/#post-office-protocol-pop","text":"POP3 is designed for receiving incoming E-mails.","title":"Post office Protocol (POP)"},{"location":"introduction/web-technologies-concepts/protocols/#simple-mail-transport-protocol-smtp","text":"SMTP is designed to send and distribute outgoing E-Mail.","title":"Simple mail transport Protocol (SMTP)"},{"location":"introduction/web-technologies-concepts/protocols/#file-transfer-protocol-ftp","text":"FTP allows users to transfer files from one machine to another. Types of files may include program files, multimedia files, text files, and documents, etc.","title":"File Transfer Protocol (FTP)"},{"location":"introduction/web-technologies-concepts/protocols/#hyper-text-transfer-protocol-http","text":"HTTP is designed for transferring a hypertext among two or more systems. HTML tags are used for creating links. These links may be in any form like text or images. HTTP is designed on Client-server principles which allow a client system for establishing a connection with the server machine for making a request. The server acknowledges the request initiated by the client and responds accordingly. How HTTP track the progress of the user from page to page? HTTP is a stateless protocol. A stateless protocol doesn't require server to retain information or status about each use for the duration of the multiple request. HTTP has HTTP cookies. Cookies allow the server to track the user state, the number of connections and last connection etc. HTTP has a persistent connection( keep-alive ) where several request can be sent from the same TCP connection. But some web apps may have to track the users progress from page to page. Solutions for these cases: Use of HTTP cookies Server side sessions Hidden variables URL-rewriting using URL encoded parameters.","title":"Hyper Text Transfer Protocol (HTTP)"},{"location":"introduction/web-technologies-concepts/protocols/#hyper-text-transfer-protocol-secure-https","text":"HTTPS is abbreviated as Hyper Text Transfer Protocol Secure is a standard protocol to secure the communication among two computers one using the browser and other fetching data from web server. HTTP is used for transferring data between the client browser (request) and the web server (response) in the hypertext format, same in case of HTTPS except that the transferring of data is done in an encrypted format. So it can be said that https thwart hackers from interpretation or modification of data throughout the transfer of packets.","title":"Hyper Text Transfer Protocol Secure (HTTPS)"},{"location":"introduction/web-technologies-concepts/protocols/#telnet","text":"Telnet is a set of rules designed for connecting one system with another. The connecting process here is termed as remote login. The system which requests for connection is the local computer, and the system which accepts the connection is the remote compute","title":"Telnet"},{"location":"introduction/web-technologies-concepts/web-services/","text":"A web service is a set of open protocols and standards that allow data to be exchanged between different applications or systems. Web services can be used by software programs written in a variety of programming languages and running on a variety of platforms to exchange data via computer networks such as the Internet in a similar way to inter-process communication on a single computer. Functions of Web Services It\u2019s possible to access it via the internet or intranet networks. XML messaging protocol that is standardized. Operating system or programming language independent. Using the XML standard, it is self-describing. A simple location approach can be used to locate it. Components of Web Services XML and HTTP is the most fundamental web services platform. The following components are used by all typical web services: SOAP Simple Object Access Protocol It is an XML based protocol for accessing web services over HTTP. It is a messaging protocol that is used to exchange data between applications. Advantages of SOAP Recommended by W3C Consortium and largely accepted standard. Lightweight protocol / based on XML. Platform / OS / Programming Langugage independent It works on top of HTTP protocol, so no extra customization required. SOAP Message Example <?xml version=\"1.0\" encoding=\"utf-8\" ?> <soap:Envelope xmlns:soap= \"http://www.w3.org/2003/05/soap-envelope\" > <soap:Header> <MyHeader xmlns= \"http://www.example.org/stock\" > <symbol> IBM </symbol> </MyHeader> </soap:Header> <soap:Body> <GetStockPrice xmlns= \"http://www.example.org/stock\" > <symbol> IBM </symbol> </GetStockPrice> </soap:Body> </soap:Envelope> UDDI Universal Description, Discovery and Integration It is an XML based standard for describing, publishing and locating web services. It is a registry for businesses worldwide to list themselves on the internet. UDDI provides a repository where WSDL files can be hosted so that a client application can discover a WSDL file to learn about the various actions that a web service offers. As a result, the client application will have full access to the UDDI, which serves as a database for all WSDL files. The UDDI registry will hold the required information for the online service, just like a telephone directory has the name, address, and phone number of a certain individual. So that a client application may figure out where it is. WSDL Web Service Description Language It is an XML notation for describing a web service. A WSDL definition tells a client how to compose a web service request. Describes the interface that is provided by web service provided. Why WSDL ? The client invoking the web service should be aware of the location of the web service. Second, the client application must understand what the web service does in order to invoke the correct web service. The WSDL, or Web services description language, is used to accomplish this. STUB (Client Side Proxy) It receives method called from client. It would stored the method details from SOAP request and receive returned values from the SOAP response and hand over to client application. Skeleton ( Server Side Proxy ) It gets method details like parameter, parameter types, return types from SOAP request. It will invoke that client requested method on Service class and get return values. It will store return values in SOAP response. ebXML Electronic Business XML It is a global standard for electronic business that enables anyone, anywhere to do business transactions with anyone over the internet. End to end B2B XML framework. Relies on existing standardsL HTTP, TCP/IP, MIME, SMTP etc. Can be implemented and deployed on virtually any computing platform. Provides concrete specifications to enable dynamic B2B collaborations. Architecture of Web Services Service Provider From an architectural perspective, it is the platform that hosts the services. Service Requestor Service requestor is the application that is looking for and invoking or initiating an interaction with a service. The browser plays the requester role, driven by a consumer or a program without a user interface. Service Registry Service requestors find service and obtain binding information for services during development.","title":"Web Services"},{"location":"introduction/web-technologies-concepts/web-services/#functions-of-web-services","text":"It\u2019s possible to access it via the internet or intranet networks. XML messaging protocol that is standardized. Operating system or programming language independent. Using the XML standard, it is self-describing. A simple location approach can be used to locate it.","title":"Functions of Web Services"},{"location":"introduction/web-technologies-concepts/web-services/#components-of-web-services","text":"XML and HTTP is the most fundamental web services platform. The following components are used by all typical web services:","title":"Components of Web Services"},{"location":"introduction/web-technologies-concepts/web-services/#soap","text":"Simple Object Access Protocol It is an XML based protocol for accessing web services over HTTP. It is a messaging protocol that is used to exchange data between applications.","title":"SOAP"},{"location":"introduction/web-technologies-concepts/web-services/#advantages-of-soap","text":"Recommended by W3C Consortium and largely accepted standard. Lightweight protocol / based on XML. Platform / OS / Programming Langugage independent It works on top of HTTP protocol, so no extra customization required.","title":"Advantages of SOAP"},{"location":"introduction/web-technologies-concepts/web-services/#soap-message","text":"","title":"SOAP Message"},{"location":"introduction/web-technologies-concepts/web-services/#example","text":"<?xml version=\"1.0\" encoding=\"utf-8\" ?> <soap:Envelope xmlns:soap= \"http://www.w3.org/2003/05/soap-envelope\" > <soap:Header> <MyHeader xmlns= \"http://www.example.org/stock\" > <symbol> IBM </symbol> </MyHeader> </soap:Header> <soap:Body> <GetStockPrice xmlns= \"http://www.example.org/stock\" > <symbol> IBM </symbol> </GetStockPrice> </soap:Body> </soap:Envelope>","title":"Example"},{"location":"introduction/web-technologies-concepts/web-services/#uddi","text":"Universal Description, Discovery and Integration It is an XML based standard for describing, publishing and locating web services. It is a registry for businesses worldwide to list themselves on the internet. UDDI provides a repository where WSDL files can be hosted so that a client application can discover a WSDL file to learn about the various actions that a web service offers. As a result, the client application will have full access to the UDDI, which serves as a database for all WSDL files. The UDDI registry will hold the required information for the online service, just like a telephone directory has the name, address, and phone number of a certain individual. So that a client application may figure out where it is.","title":"UDDI"},{"location":"introduction/web-technologies-concepts/web-services/#wsdl","text":"Web Service Description Language It is an XML notation for describing a web service. A WSDL definition tells a client how to compose a web service request. Describes the interface that is provided by web service provided.","title":"WSDL"},{"location":"introduction/web-technologies-concepts/web-services/#why-wsdl","text":"The client invoking the web service should be aware of the location of the web service. Second, the client application must understand what the web service does in order to invoke the correct web service. The WSDL, or Web services description language, is used to accomplish this.","title":"Why WSDL ?"},{"location":"introduction/web-technologies-concepts/web-services/#stub-client-side-proxy","text":"It receives method called from client. It would stored the method details from SOAP request and receive returned values from the SOAP response and hand over to client application.","title":"STUB (Client Side Proxy)"},{"location":"introduction/web-technologies-concepts/web-services/#skeleton-server-side-proxy","text":"It gets method details like parameter, parameter types, return types from SOAP request. It will invoke that client requested method on Service class and get return values. It will store return values in SOAP response.","title":"Skeleton ( Server Side Proxy )"},{"location":"introduction/web-technologies-concepts/web-services/#ebxml","text":"Electronic Business XML It is a global standard for electronic business that enables anyone, anywhere to do business transactions with anyone over the internet. End to end B2B XML framework. Relies on existing standardsL HTTP, TCP/IP, MIME, SMTP etc. Can be implemented and deployed on virtually any computing platform. Provides concrete specifications to enable dynamic B2B collaborations.","title":"ebXML"},{"location":"introduction/web-technologies-concepts/web-services/#architecture-of-web-services","text":"Service Provider From an architectural perspective, it is the platform that hosts the services. Service Requestor Service requestor is the application that is looking for and invoking or initiating an interaction with a service. The browser plays the requester role, driven by a consumer or a program without a user interface. Service Registry Service requestors find service and obtain binding information for services during development.","title":"Architecture of Web Services"},{"location":"soa-and-restful/resource-oriented-architecture/","text":"","title":"Resource Oriented Architecture"},{"location":"soa-and-restful/roa-analysis-and-design/read-only/","text":"","title":"Read Only Resource Oriented Services"},{"location":"soa-and-restful/roa-analysis-and-design/read-write/","text":"","title":"Read Write Resource Oriented Services"},{"location":"software-development-methodologies/agile-methodologies/","text":"What is Agile Methodology? Agile method is an iterative and incremental tactic to software design that utilizes constant planning, understanding, upgrading, team partnership, development, and delivery. The agile process is fragmented into separate models that teams work on, thereby encouraging flexibility to changes. By definition, Agile methodology, a variety of project management approach, that is confirmedly deployed for software development, also where requirements and solutions unfold via the collaborative work of self- systemized and cross-functional teams and their users. Types of Agile Methodology There are various types of agile methodology available in the market to suit every project\u2019s wants. 1. Agile Scrum Methodology Scrum is a lightweight framework of Agile Project Management, it can be adopted to conduct iterative and all types of incremental projects. One of the most popular agile methodology examples is the agile scrum development methodology, which is depicted by various cycles of development and has specific characteristics like simplicity, sustained productivity, and strength for blending several underlying approaches adopted by other agile methods. Scrum breaks down the development phases into stages or cycles called \u2018sprints\u2019. The development time for each sprint is maximized and dedicated, thereby managing only one sprint at a time. Scrum and agile methodologies focus on continuous deliverables, and thus this method lets designers adjust priorities to ensure that any incomplete or overdue sprints get more attention. The hands-on system under Scrum includes easy steps and elements, that are the following : * Product owner , who creates an estimated wish list that is identified as a product backlog. * Scrum team , that takes one little part of the top wish list, termed as Sprint Backlog and work out in order to implement it. * After that scrum team concludes their sprint backlog task in a Sprint , i.e., a period of 2-4 weeks. In addition to that, the progress of their work can be accessed through a meeting that is called Daily Scrum . * The Scrum Master maintains the team focused toward their targets. * At the end of a sprint, the task is able to represent or transmit, and team finishes that particular sprint with a review and feedback and initiates with a new one. 2. Lean It is the iterative, agile methodology that directs the team on addressing customer values by compelling value stream mapping, although, it is a deeply adaptable, emerging methodology with the absence of solid guidelines, laws, or methods. The fundamental principles of Lean including; Uninterrupted advancement, Respect for other people, Eradicate waste, Rapid delivery, Knowledge-making and Defer commitment. Lean gives the authority of decision-making to every individual and small teams as it is considered as the most faster and effective method in comparison to the hierarchical flow of control. It focuses on the proficient implementation of team resources and assures to make everyone as productive as possible for maximum time. 3. Kanban Originating from the Japanese language, the translation of the word \u2018Kanban\u2019 is \u201cvisual board or signboard\u201d and is connected to the concept of \u201cjust in time\u201d! Projects through Kanban are overseen with the help of the Kanban Board, which is divided into columns to depict the process flow of the software development. This helps in increasing visibility teams as the teams can see the progress through every stage of development and prepare for the upcoming tasks to deliver the product \u201cjust in time\u201d! This method requires thorough interaction and transparency to enable the team members to be equipped with the right stage of the development at any time and have a cohesive flow of work at all times. Similar to Scrum, Kanban is the process developed for supporting collaborative teamwork more effectively. It works adequately on three principles; For visualizing what to perform today , i.e, workflow automation, that specifies all the elements, under the context of each other, could be very informative. For bounding the quantity of work in progress to maintain harmony in the flow-based approach, so that teams can\u2018t begin and commit extra work at once. For boosting flow , like, when some task is about to complete, the next priority would be item into play from the backlog. 4. Extreme Programming(XP) Extreme Programming (XP) is a methodology that emphasizes teamwork, communication, and feedback. Generally being used with Scrum, it can focus on how Agile can increase customer satisfaction, instead of delivering at the entirety, the customer seeks for the near future, it provides them what they demand at present. Similar to scrum, this method also uses sprints or short development cycles. This is developed by a team to create a productive and highly efficient environment. Extreme Programming technique is very supportive in a situation of constant and varying demands from the customers. It motivates the developers to accept changes in the customer\u2019s demands, even if they pop-up in an advanced phase of the development process. In Extreme Programming, the project is tested from the initial stages by collecting feedback that progresses the output of the system. This also presents a spot check to implement easily any customer requirements. XP method is basically based on the four simple values: * Uniformity, * Simplicity * Communication, * Feedback and * Endurance. 5. Crystal In actual, the Crystal Methodology is a class of small agile methodologies that incorporate Crystal Clear, Crystal Yellow, Crystal Red and many more. Every methodology has its own specific framework that is characterized by factors such as system criticality, team size, and project priorities. Depending on the nature of the project or system criticality such as Comfort (C), Essential Money (E), Discretionary Money (D), and Life (L), the kind of crystal agile methodology is chosen. It is introduced by Alistair Cockburn while participated in writing the Agile manifesto for software development. Including three factors that define that traits of a project are team size, system seriousness, and project preferences where projects are categorized into four levels, based on the system criticality, that are; * Comfort (C), * Discretionary Money (D), * Essential Money (E), and * Life (L). Depending on the size of the project, the most number of people can be involved in the project, i.e., gigantic the project, more the people involved. If the project is large, many roles can be accounted for and vice versa. Moreover, crystal methodology is converged on interaction, people, expertise, communication, skills, and community. 6. Dynamic System Development Method (DSDM) To address the need for a standard industry charter for the swift delivery of software, the Dynamic Systems Development Method (DSDM) was developed. DSDM gives a comprehensive structure that is defined and modified to create a plan, execute, manage, and scale the procedure of software development. However, this is iterative, incremental and Rapid Application Development(RAD) methodology. The framework of DSDM incorporates feasibility and business studies, prototype iteration and functional model, design and develop iteration, and deployment. Basically, DSDM works on eight principles, that guide the team and build a perspective for delivering a product on time and under budget, are : * To converge on the business requirement, * Deliver on time, * Collaborate, * Nevermore negotiate quality, * Create incrementally from firm associations, * Expand iteratively, * Communicate frequently and clearly, and * Manifest control. Based on a business-driven approach and eight principles, the DSDM believes that modifications to the project are always expected, and quality with timely delivery must never be negotiated. 7. Feature Driven Development (FDD) Being an iterative and accumulative development process, FDD is a lightweight, agile methodology to develop software. It mixes various industry-established best practices into united as a whole. These practices are encouraged in terms of a feature-first perspective while aiming at creating values for the client. However, the main purpose lies in delivering stable, working software frequently on time. The five core activities under FDD involve; * Designing an entire model, * Making features lists, * Designing, * Developing and * Building through features. FDD is a constructive, arranged, centred method for the entire software workflow management and a reliable choice for software-focused teams and associations.","title":"Methodologies"},{"location":"software-development-methodologies/agile-methodologies/#what-is-agile-methodology","text":"Agile method is an iterative and incremental tactic to software design that utilizes constant planning, understanding, upgrading, team partnership, development, and delivery. The agile process is fragmented into separate models that teams work on, thereby encouraging flexibility to changes. By definition, Agile methodology, a variety of project management approach, that is confirmedly deployed for software development, also where requirements and solutions unfold via the collaborative work of self- systemized and cross-functional teams and their users.","title":"What is Agile Methodology?"},{"location":"software-development-methodologies/agile-methodologies/#types-of-agile-methodology","text":"There are various types of agile methodology available in the market to suit every project\u2019s wants.","title":"Types of Agile Methodology"},{"location":"software-development-methodologies/agile-methodologies/#1-agile-scrum-methodology","text":"Scrum is a lightweight framework of Agile Project Management, it can be adopted to conduct iterative and all types of incremental projects. One of the most popular agile methodology examples is the agile scrum development methodology, which is depicted by various cycles of development and has specific characteristics like simplicity, sustained productivity, and strength for blending several underlying approaches adopted by other agile methods. Scrum breaks down the development phases into stages or cycles called \u2018sprints\u2019. The development time for each sprint is maximized and dedicated, thereby managing only one sprint at a time. Scrum and agile methodologies focus on continuous deliverables, and thus this method lets designers adjust priorities to ensure that any incomplete or overdue sprints get more attention. The hands-on system under Scrum includes easy steps and elements, that are the following : * Product owner , who creates an estimated wish list that is identified as a product backlog. * Scrum team , that takes one little part of the top wish list, termed as Sprint Backlog and work out in order to implement it. * After that scrum team concludes their sprint backlog task in a Sprint , i.e., a period of 2-4 weeks. In addition to that, the progress of their work can be accessed through a meeting that is called Daily Scrum . * The Scrum Master maintains the team focused toward their targets. * At the end of a sprint, the task is able to represent or transmit, and team finishes that particular sprint with a review and feedback and initiates with a new one.","title":"1. Agile Scrum Methodology"},{"location":"software-development-methodologies/agile-methodologies/#2-lean","text":"It is the iterative, agile methodology that directs the team on addressing customer values by compelling value stream mapping, although, it is a deeply adaptable, emerging methodology with the absence of solid guidelines, laws, or methods. The fundamental principles of Lean including; Uninterrupted advancement, Respect for other people, Eradicate waste, Rapid delivery, Knowledge-making and Defer commitment. Lean gives the authority of decision-making to every individual and small teams as it is considered as the most faster and effective method in comparison to the hierarchical flow of control. It focuses on the proficient implementation of team resources and assures to make everyone as productive as possible for maximum time.","title":"2. Lean"},{"location":"software-development-methodologies/agile-methodologies/#3-kanban","text":"Originating from the Japanese language, the translation of the word \u2018Kanban\u2019 is \u201cvisual board or signboard\u201d and is connected to the concept of \u201cjust in time\u201d! Projects through Kanban are overseen with the help of the Kanban Board, which is divided into columns to depict the process flow of the software development. This helps in increasing visibility teams as the teams can see the progress through every stage of development and prepare for the upcoming tasks to deliver the product \u201cjust in time\u201d! This method requires thorough interaction and transparency to enable the team members to be equipped with the right stage of the development at any time and have a cohesive flow of work at all times. Similar to Scrum, Kanban is the process developed for supporting collaborative teamwork more effectively. It works adequately on three principles; For visualizing what to perform today , i.e, workflow automation, that specifies all the elements, under the context of each other, could be very informative. For bounding the quantity of work in progress to maintain harmony in the flow-based approach, so that teams can\u2018t begin and commit extra work at once. For boosting flow , like, when some task is about to complete, the next priority would be item into play from the backlog.","title":"3. Kanban"},{"location":"software-development-methodologies/agile-methodologies/#4-extreme-programmingxp","text":"Extreme Programming (XP) is a methodology that emphasizes teamwork, communication, and feedback. Generally being used with Scrum, it can focus on how Agile can increase customer satisfaction, instead of delivering at the entirety, the customer seeks for the near future, it provides them what they demand at present. Similar to scrum, this method also uses sprints or short development cycles. This is developed by a team to create a productive and highly efficient environment. Extreme Programming technique is very supportive in a situation of constant and varying demands from the customers. It motivates the developers to accept changes in the customer\u2019s demands, even if they pop-up in an advanced phase of the development process. In Extreme Programming, the project is tested from the initial stages by collecting feedback that progresses the output of the system. This also presents a spot check to implement easily any customer requirements. XP method is basically based on the four simple values: * Uniformity, * Simplicity * Communication, * Feedback and * Endurance.","title":"4. Extreme Programming(XP)"},{"location":"software-development-methodologies/agile-methodologies/#5-crystal","text":"In actual, the Crystal Methodology is a class of small agile methodologies that incorporate Crystal Clear, Crystal Yellow, Crystal Red and many more. Every methodology has its own specific framework that is characterized by factors such as system criticality, team size, and project priorities. Depending on the nature of the project or system criticality such as Comfort (C), Essential Money (E), Discretionary Money (D), and Life (L), the kind of crystal agile methodology is chosen. It is introduced by Alistair Cockburn while participated in writing the Agile manifesto for software development. Including three factors that define that traits of a project are team size, system seriousness, and project preferences where projects are categorized into four levels, based on the system criticality, that are; * Comfort (C), * Discretionary Money (D), * Essential Money (E), and * Life (L). Depending on the size of the project, the most number of people can be involved in the project, i.e., gigantic the project, more the people involved. If the project is large, many roles can be accounted for and vice versa. Moreover, crystal methodology is converged on interaction, people, expertise, communication, skills, and community.","title":"5. Crystal"},{"location":"software-development-methodologies/agile-methodologies/#6-dynamic-system-development-method-dsdm","text":"To address the need for a standard industry charter for the swift delivery of software, the Dynamic Systems Development Method (DSDM) was developed. DSDM gives a comprehensive structure that is defined and modified to create a plan, execute, manage, and scale the procedure of software development. However, this is iterative, incremental and Rapid Application Development(RAD) methodology. The framework of DSDM incorporates feasibility and business studies, prototype iteration and functional model, design and develop iteration, and deployment. Basically, DSDM works on eight principles, that guide the team and build a perspective for delivering a product on time and under budget, are : * To converge on the business requirement, * Deliver on time, * Collaborate, * Nevermore negotiate quality, * Create incrementally from firm associations, * Expand iteratively, * Communicate frequently and clearly, and * Manifest control. Based on a business-driven approach and eight principles, the DSDM believes that modifications to the project are always expected, and quality with timely delivery must never be negotiated.","title":"6. Dynamic System Development Method (DSDM)"},{"location":"software-development-methodologies/agile-methodologies/#7-feature-driven-development-fdd","text":"Being an iterative and accumulative development process, FDD is a lightweight, agile methodology to develop software. It mixes various industry-established best practices into united as a whole. These practices are encouraged in terms of a feature-first perspective while aiming at creating values for the client. However, the main purpose lies in delivering stable, working software frequently on time. The five core activities under FDD involve; * Designing an entire model, * Making features lists, * Designing, * Developing and * Building through features. FDD is a constructive, arranged, centred method for the entire software workflow management and a reliable choice for software-focused teams and associations.","title":"7. Feature Driven Development (FDD)"},{"location":"software-development-methodologies/agile-principles/","text":"Introduction AGILE software development is an approach to software devlopment under which requirements and solution evolve throught the collaborative effort of self organizing and cross functionalities and their customer/end users. The key in AGILE technique is compressing the five sequences of the conventional software development method called Waterfall method to about one week cycle. It manages to do this by developing a system through repetitive cycle (iterative) and in small portions (incremental), allowing developers to test and review during development. Principles The manifesto for AGILE Software Development is based in 12 Principles. Customer Satisfaction by early and continous deliveryof valuable software. Welcome changing requirement even in late development. Deliver working software frequently (weeks rather than month). Close and daily co-operation between customer and developer. Projects are build around motivated individuals whom could be trusted. Face to face conversation is best form of communication co-location. Working software is the primary measure of progress. Sustainable development would able to maintain a constant pace. Continous attention to technical excellence of good design. Simplicity-the art of maximizing the amount of work not done\u2013is essential . Best Architectures, Requirements and design emerge from self organizing teams. Regularly Reflect and Adjust Your Way of Work to Boost Effectiveness. Methodologies: Scrum XP FDD (Feature Driven Development) Lean and Kanban Method. DSDM (Dynamic System Development Method) ASD (Adaptive Software Development) Agile Unified Process Practices Test Driven Development Peer Programming Behaviour Driven Development Acceptance Test Driven Development Continous Integration","title":"Principles"},{"location":"software-development-methodologies/agile-principles/#introduction","text":"AGILE software development is an approach to software devlopment under which requirements and solution evolve throught the collaborative effort of self organizing and cross functionalities and their customer/end users. The key in AGILE technique is compressing the five sequences of the conventional software development method called Waterfall method to about one week cycle. It manages to do this by developing a system through repetitive cycle (iterative) and in small portions (incremental), allowing developers to test and review during development.","title":"Introduction"},{"location":"software-development-methodologies/agile-principles/#principles","text":"The manifesto for AGILE Software Development is based in 12 Principles. Customer Satisfaction by early and continous deliveryof valuable software. Welcome changing requirement even in late development. Deliver working software frequently (weeks rather than month). Close and daily co-operation between customer and developer. Projects are build around motivated individuals whom could be trusted. Face to face conversation is best form of communication co-location. Working software is the primary measure of progress. Sustainable development would able to maintain a constant pace. Continous attention to technical excellence of good design. Simplicity-the art of maximizing the amount of work not done\u2013is essential . Best Architectures, Requirements and design emerge from self organizing teams. Regularly Reflect and Adjust Your Way of Work to Boost Effectiveness.","title":"Principles"},{"location":"software-development-methodologies/agile-principles/#methodologies","text":"Scrum XP FDD (Feature Driven Development) Lean and Kanban Method. DSDM (Dynamic System Development Method) ASD (Adaptive Software Development) Agile Unified Process","title":"Methodologies:"},{"location":"software-development-methodologies/agile-principles/#practices","text":"Test Driven Development Peer Programming Behaviour Driven Development Acceptance Test Driven Development Continous Integration","title":"Practices"},{"location":"software-development-methodologies/behaviour-driven-development/","text":"BDD is software development process that emerges from test driven development. BDD combines the general technique of principles of TDD with ideas from Domain Driven Design and Analysis and design to provide software development and management, teams with shared tools and a shared process to collaborate on software development. BDD is largely faciliated throught the use of a simple domain specific language using natural language constructs that can express the behaviour and the expected outcomes. BDD is considered an effective technical practice especially then the problem space of the business problem to solve is complex. Principles of BDD BDD specifies that tests of any unit of software should be specified in terms of the desired behavior of the unit. BDD, also related to how the desired behaviour should be specified. BDD specified business analysis and developer should collaborate and should specify behaviour in terms of user stories. Scenario/Story: Returns got stock. As a: Store Owner In order to keep track of stock, I want to add items back to stock when they're returned. Scenario/Story: Refunded item should be returned to stock. Given that a customer previously brought a black sweaters from the store. And I have there 3 black sweaters in stock. When they return the black sweater for a refund, Then, there should have 4 black sweaters in stock.","title":"Behaviour Driven Development (BDD)"},{"location":"software-development-methodologies/behaviour-driven-development/#principles-of-bdd","text":"BDD specifies that tests of any unit of software should be specified in terms of the desired behavior of the unit. BDD, also related to how the desired behaviour should be specified. BDD specified business analysis and developer should collaborate and should specify behaviour in terms of user stories. Scenario/Story: Returns got stock. As a: Store Owner In order to keep track of stock, I want to add items back to stock when they're returned. Scenario/Story: Refunded item should be returned to stock. Given that a customer previously brought a black sweaters from the store. And I have there 3 black sweaters in stock. When they return the black sweater for a refund, Then, there should have 4 black sweaters in stock.","title":"Principles of BDD"},{"location":"software-development-methodologies/test-driven-development/","text":"TDD = TFD + Refactoring, TFD = Test First Development Introduction It is a software development process that relies on the repetition of a very short development cycle. Requirements are turned into very specific test cases. Then the software is improved to pass the new test only. TDD is related to the test first programming concept of XP ( Extreme Programming ). TDD Starts with development of test for each one of the feature. The test might fail as the test are developed even before the development. Development team then develops and refactors the code to pass the test. TDD Sequuences Add a test. Run all tests and see if the new test fails. Write the code that causes the test to pass. Run tests. Refactor code. Continue process from step 1 to 5. Benefits of TDD Much less debug time. Code proven to meet requirements. Test becomes safety net. Near 0 (zero) Defects. Shorter development cycle.","title":"Test Driven Development (TDD)"},{"location":"software-development-methodologies/test-driven-development/#introduction","text":"It is a software development process that relies on the repetition of a very short development cycle. Requirements are turned into very specific test cases. Then the software is improved to pass the new test only. TDD is related to the test first programming concept of XP ( Extreme Programming ). TDD Starts with development of test for each one of the feature. The test might fail as the test are developed even before the development. Development team then develops and refactors the code to pass the test.","title":"Introduction"},{"location":"software-development-methodologies/test-driven-development/#tdd-sequuences","text":"Add a test. Run all tests and see if the new test fails. Write the code that causes the test to pass. Run tests. Refactor code. Continue process from step 1 to 5.","title":"TDD Sequuences"},{"location":"software-development-methodologies/test-driven-development/#benefits-of-tdd","text":"Much less debug time. Code proven to meet requirements. Test becomes safety net. Near 0 (zero) Defects. Shorter development cycle.","title":"Benefits of TDD"},{"location":"software-security/basic-attacks/","text":"An attack is an information security threat that involves an attempt to obtain, alter, destroy, remove, implant or reveal information without authorized access or permission. It happens to both individuals and organizations. There are many different kinds of attacks, including but not limited to passive, active, targeted, clickjacking, brandjacking, botnet, phishing, spamming, inside and outside. An attack is one of the biggest security threats in information technology, and it comes in different forms. A passive attack is one that does not affect any system, although information is obtained. A good example of this is wiretapping. An active attack has the potential to cause major damage to an individual\u2019s or organization\u2019s resource because it attempts to alter system resources or affect how they work. A good example of this might be a virus or other type of malware. 1. Site Mapping The first technique an attacker will typically use against is your site is site mapping. Attacker will often do some or all of the following: Use a crawler to follow all the links in tha application and map outs the application page flow and authentication mechanism. Read comments in the documants delivered to the browser, this can give tips about the business logic and algorithm. Looks for usernames, passwords and database names in the documents delivered to the client. Looks for SQL Query. Locate hidden inputs in the form. Determine what parameters are passed between the pages. Force various error scenarios and see how the server response. 2. Guessing File and Directory Names File such as config.php and settings.ini are often used to store sensitive information. They may contain databases info, passwords, usernames, or other information that should not be shared. 3. Exploiting Known Vulnerabilities / Security Flaws The security flaws in web server software, operating system, when bugs are found, patches are usually posted to fix the, it takes time for system, administrator top apply secutity patches. Attackers can exploit the time between discovery of the system bug and the time it takes to fix the bug. 4. Bypassing restriction on input choices To improve the User Experience (UX), client code often performs validation of user input data. Poorly written application sometimes assumes / trusts that the submitted calues will be valid / will be drawn from the expected range. By bypassing the user interface, attackers can submit arbitary values, for user input variables.","title":"Basic Attacks"},{"location":"software-security/basic-attacks/#1-site-mapping","text":"The first technique an attacker will typically use against is your site is site mapping. Attacker will often do some or all of the following: Use a crawler to follow all the links in tha application and map outs the application page flow and authentication mechanism. Read comments in the documants delivered to the browser, this can give tips about the business logic and algorithm. Looks for usernames, passwords and database names in the documents delivered to the client. Looks for SQL Query. Locate hidden inputs in the form. Determine what parameters are passed between the pages. Force various error scenarios and see how the server response.","title":"1. Site Mapping"},{"location":"software-security/basic-attacks/#2-guessing-file-and-directory-names","text":"File such as config.php and settings.ini are often used to store sensitive information. They may contain databases info, passwords, usernames, or other information that should not be shared.","title":"2. Guessing File and Directory Names"},{"location":"software-security/basic-attacks/#3-exploiting-known-vulnerabilities-security-flaws","text":"The security flaws in web server software, operating system, when bugs are found, patches are usually posted to fix the, it takes time for system, administrator top apply secutity patches. Attackers can exploit the time between discovery of the system bug and the time it takes to fix the bug.","title":"3. Exploiting Known Vulnerabilities / Security Flaws"},{"location":"software-security/basic-attacks/#4-bypassing-restriction-on-input-choices","text":"To improve the User Experience (UX), client code often performs validation of user input data. Poorly written application sometimes assumes / trusts that the submitted calues will be valid / will be drawn from the expected range. By bypassing the user interface, attackers can submit arbitary values, for user input variables.","title":"4. Bypassing restriction on input choices"},{"location":"software-security/client-side-authentication/","text":"Client-side authentication is when authentication checks are performed completely at users' side. Is authentication client-side safe? Well, but the information is already on the client, and there's no technical possibility to prevent a user from accessing it, even if it's \"behind the scenes\". So even if purely client-side authentication was possible (it isn't, for the same reasons), you will ultimately fail at client-side authorisation either way. Approaches: Use Cryptography Appropriately Protect Passwords Handle Authenticators Carefully Use Cryptography Appropriately Appropriate amount of security Keep It Simple, Stupid Do not be inventive Designers should be security experts Do not rely on the secrecy of a protocol Vulnerable to exposure Understand the properties of cryptographic tools Example: Crypt() Do not compose security schemes Hard to foresee the effects Protect Passwords Limit exposure Don\u2019t send it back to the user (much less in the clear) Authenticate using SSL vs. HTTP Prohibit guessable passwords No dictionary passwords Reauthenticate before changing passwords Avoid replay attack Handle Authenticators Carefully Make authenticators unforgeable If using keys as session identifier: should be cryptographically random Protect from tampering (MAC) Protect authenticators that must be secret Authenticator as cookie Sent by SSL Don\u2019t forget the flag! (SprintPCS) Authenticator as part of URL Avoid using persistent cookies Persistent vs. ephemeral cookies Cookie files on the web Limit the lifetime of authenticators Encrypt the timestamp Secure binding limits the damage from stolen authenticators Bind authenticators to specific network addresses Increases the difficulty of a replay attack","title":"Client Side Authentication"},{"location":"software-security/client-side-authentication/#approaches","text":"Use Cryptography Appropriately Protect Passwords Handle Authenticators Carefully","title":"Approaches:"},{"location":"software-security/client-side-authentication/#use-cryptography-appropriately","text":"Appropriate amount of security Keep It Simple, Stupid Do not be inventive Designers should be security experts Do not rely on the secrecy of a protocol Vulnerable to exposure Understand the properties of cryptographic tools Example: Crypt() Do not compose security schemes Hard to foresee the effects","title":"Use Cryptography Appropriately"},{"location":"software-security/client-side-authentication/#protect-passwords","text":"Limit exposure Don\u2019t send it back to the user (much less in the clear) Authenticate using SSL vs. HTTP Prohibit guessable passwords No dictionary passwords Reauthenticate before changing passwords Avoid replay attack","title":"Protect Passwords"},{"location":"software-security/client-side-authentication/#handle-authenticators-carefully","text":"Make authenticators unforgeable If using keys as session identifier: should be cryptographically random Protect from tampering (MAC) Protect authenticators that must be secret Authenticator as cookie Sent by SSL Don\u2019t forget the flag! (SprintPCS) Authenticator as part of URL Avoid using persistent cookies Persistent vs. ephemeral cookies Cookie files on the web Limit the lifetime of authenticators Encrypt the timestamp Secure binding limits the damage from stolen authenticators Bind authenticators to specific network addresses Increases the difficulty of a replay attack","title":"Handle Authenticators Carefully"},{"location":"software-security/cross-site-scripting/","text":"XSS attacks are a type of injection in which malicious scripts are injected intro the webpages. XSS attacks occur when an attacker uses a web application to send malicious code to a user in form of a browser side script. Types of XSS Reflected / Non-Persistence XSS Occur when the data provided by a web client, most commonly in HTTP (Query Parameters) is used immediately by server side scripts to perform actions without properly sanitizing the request. Stored / Persistence XSS It occurs when the data provided by the attacker is saved by the server in a database or other storage medium. The stored script then executes repeatedly on the server side. Causes of XSS Data enters a Web application through an untrusted source, most frequently a web request. The data is included in dynamic content that is sent to a web user without being validated for malicious content.","title":"Cross Site Scripting"},{"location":"software-security/cross-site-scripting/#types-of-xss","text":"Reflected / Non-Persistence XSS Occur when the data provided by a web client, most commonly in HTTP (Query Parameters) is used immediately by server side scripts to perform actions without properly sanitizing the request. Stored / Persistence XSS It occurs when the data provided by the attacker is saved by the server in a database or other storage medium. The stored script then executes repeatedly on the server side.","title":"Types of XSS"},{"location":"software-security/cross-site-scripting/#causes-of-xss","text":"Data enters a Web application through an untrusted source, most frequently a web request. The data is included in dynamic content that is sent to a web user without being validated for malicious content.","title":"Causes of XSS"},{"location":"software-security/dos/","text":"A DOS Attack is an attack meant to shut down a machine or network or a service making it inaccessible to its intended users. DOS attacks typically flood servers, systems or networks with traffic in order to overwhelm the victim resources and make it difficult or impossible for legitimate users to access the services / resources. Types of DOS Attacks Flooding Services Crashing Services Flooding Services Flood attacks when the system receive too much traffic for the server to buffer, causing them to slow down and eventually stop. Popular flood attacks are: Buffer Overflow attacks Buffer Overflow attacks are attacks that overflow the buffer of a server, causing it to crash ICNP Flood ICMP flood attacks are attacks that flood the Internet Control Message Protocol (ICMP) protocol also known as a Ping flood attack, is a common Denial-of-Service (DoS) attack in which an attacker attempts to overwhelm a targeted device with ICMP echo-requests (pings) SYN Flood - Synchronization Flood TCP SYN flood, is a type of denial-of-service (DoS) or distributed denial-of-service (DDoS) attack that sends massive numbers of SYN requests to a server to overwhelm it with open connections. Crashing Services Crashing services are attacks that cause the server to crash. Signs of DOS Attacks Degradation in network performance especially when attempting to files stores on the networking or when accessing the websites. Higher than usual volume of spam email. An inability to reach a particular websites. Distributed Denial of Service (DDoS) DDoS attacks are attacks that are distributed across a network. A DDoS attack occurs when multiple systems, plan or co-ordinate a synchronize DoS attack to a single target. A essential difference is that instead of being attacked from a single location, the target is attacked from multiple locations at once. DDoS Attack Mitigation Use of a firewall to block the suspicious requests. Buy more bandwidth and scale the server. Build redundancy intro your infrastructure. Configure your network hardware against DDoS attacks. Protect your DNS Server. Deploy Anti-DDoS software modules. Use a VPN to protect your network. Use a load balancer to distribute the traffic.","title":"Denial of Service"},{"location":"software-security/dos/#types-of-dos-attacks","text":"Flooding Services Crashing Services","title":"Types of DOS Attacks"},{"location":"software-security/dos/#flooding-services","text":"Flood attacks when the system receive too much traffic for the server to buffer, causing them to slow down and eventually stop. Popular flood attacks are: Buffer Overflow attacks Buffer Overflow attacks are attacks that overflow the buffer of a server, causing it to crash ICNP Flood ICMP flood attacks are attacks that flood the Internet Control Message Protocol (ICMP) protocol also known as a Ping flood attack, is a common Denial-of-Service (DoS) attack in which an attacker attempts to overwhelm a targeted device with ICMP echo-requests (pings) SYN Flood - Synchronization Flood TCP SYN flood, is a type of denial-of-service (DoS) or distributed denial-of-service (DDoS) attack that sends massive numbers of SYN requests to a server to overwhelm it with open connections.","title":"Flooding Services"},{"location":"software-security/dos/#crashing-services","text":"Crashing services are attacks that cause the server to crash.","title":"Crashing Services"},{"location":"software-security/dos/#signs-of-dos-attacks","text":"Degradation in network performance especially when attempting to files stores on the networking or when accessing the websites. Higher than usual volume of spam email. An inability to reach a particular websites.","title":"Signs of DOS Attacks"},{"location":"software-security/dos/#distributed-denial-of-service-ddos","text":"DDoS attacks are attacks that are distributed across a network. A DDoS attack occurs when multiple systems, plan or co-ordinate a synchronize DoS attack to a single target. A essential difference is that instead of being attacked from a single location, the target is attacked from multiple locations at once.","title":"Distributed Denial of Service (DDoS)"},{"location":"software-security/dos/#ddos-attack-mitigation","text":"Use of a firewall to block the suspicious requests. Buy more bandwidth and scale the server. Build redundancy intro your infrastructure. Configure your network hardware against DDoS attacks. Protect your DNS Server. Deploy Anti-DDoS software modules. Use a VPN to protect your network. Use a load balancer to distribute the traffic.","title":"DDoS Attack Mitigation"},{"location":"software-security/introduction/","text":"How to build a secure application ? Software security is an idea implemented to protect software against malicious attacks and other attacker risk so that the software continues to function, run as expected, and is not compromised under such potential risk. Security is necessary to provide integrity, confidentiality, and availability of data. Security relies on the following elements: [ CIA4 ] a. Authentication - Authentication is the process of verifying the identity of a user. - Authentication addresses the question: \"Who is this user?\" - It is the process of uniquely identify the clients of your applications and services. b. Authorization - Authorization is the process of verifying the permissions of a user. - Authorization addresses the question: \"What can this user do?\" - It is the process that governs the resources and operations that the user is permitted to access and operate. c. Auditing - Effective auditing and logging is the key to non-repudiation (denial of truth). - It guarantees that a user cannot deny performing an operation or initiating an transaction. d. Confidentiality - It refers to the privacy of data. - It is a process of making sure that data remains private and confidential and that it cannot be viewed by unauthorized users. - Encryption is frequently used to enforce confidentiality. e. Integrity - It is the guarantee that data is protected from accidental or malicious modification. - Integrity for data in transmission is typically provided by hashing techniques ad message authentication ports. f. Availability - It is the guarantee that data is available to the intended recipient. - The goal for many attackers with denial of service attack is to crash an application or to make that it is sufficiently overwhelmed so that other users cannot access the applicaiton.","title":"Introduction"},{"location":"software-security/sql-injection/","text":"A SQL Injection is an attack that consist of insertion ot injection of a SQL query via the input data from the client to the applicaiton. SQL Injection is the code injection technique where the malicious SQL queries are inserted into an entry field and then executed by the application. A successful SQL injection expert can easily exploit this vulnerability to gain access to the database. They can: read sensitive data from database, modify database data (insert, update, delete), and even execute arbitrary SQL commands such as administrative operations (such as shut own the DBMS). Types of SQL Injection Classic SQL Injection Error based SQL Injection It relies on error message thrown by the database server to obtain information about the structure of the database. Union based SQL Injection It forces UNION SQL operator to combine the results of one or more select statements into a single results which is then returned as a response. Blind SQL Injection Boolean Based It forces the application to return a different result depending on whether the query returns True or False result. Prevention technique Prepared Statement (With parameterized query) Paramaterized query force the developer to first refine all the SQL code and pass each parameter to query later. This coding style allows the database to distinguish between code and data, regardless of what user input is supplied. Prepared Statements ensure that an attacker is not able to change the intent of the query, even if SQL commands are inserted by an attackers. Explaination: Can't be able to change the paramter later. Stored Procedure Stored procedure are not always safe from SQL injection, however it tries to maintain certain standard of security. Stored Procedure programming constructs have the same effect as the use of parameterized queries when incremented safely which is the norm for most stored procedure languages. White List Input Valdation Whitelist validation is the practice of only accepting input that is known to be good. This can involve validating compliance with the expected type, length or size, numeric range, or other format standards before accepting the input for further processing. Escaping all user supplied input. Escaping all user supplied input is the practice of escaping all user supplied input before passing it to the database. While escaping, the input is converted to a format that is safe for the database to process. The escaped input doesn't perform any operation on the database, even if the input contains malicious SQL commands. Steps to Build JDBC Application using Prepared Statement Load and Register driver class. Class . forName ( \"Oracle.jdbc.OracleDriver\" ); Establish Conection Connection con = Driver . Manager . getConnection ( url , DbUsername , DbPassword ); Creation of statement Object String INSERT_USERS_SQL = \"INSERT INTO employee\" + \" (id, first_name, last_name) VALUES \" + \" (?, ?, ?);\" PreparedStatement preparedStatement = connection . prepareStatement ( INSERT_USERS_SQL ) preparedStatement . setInt ( 1 , 1 ); preparedStatement . setString ( 2 , \"Arjun\" ); preparedStatement . setString ( 3 , \"Adhikari\" ); Send and Execute SQL Query Result rs = preparedStatement . executeUpdate (); Process Result from ResultSet. If rs is result from Select Query, then we can use while loop to iterate through the result set. while ( rs . next ()) { System . out . Println ( rs . getInt ( 1 )); } If rs is int (Non-Select Query). System . out . Println ( rs + \" rows affected\" ); Close connection con.close(); Types of SQL Commands DDL (Data Definition Language) CREATE TABLE, ALTER, DROP DQL (Data Query Language) SELECT DCL (Data Control Language) ALTER, PASSWORD, GRANT ACCESS DML (Data Manipulation Language) INSERT, DELETE, UPDATE (Data Administration) START AUDIT (Data Transaction) COMMIT, ROLLBACK, SAVEPOINT What should I know as Java Developer ? Select Queries ( DQL ) Returns Result Set Non-Select Queries ( DML ) Returns Numeric Value Methods to Execute SQL Query executeQuery() To execute SELECT queries. public result executeQuery(String sqlQuery) throws SQLException Eg: Result rs = st.executeQuery(\"SELECT * FROM employess\"); while(rs.next()){ System.out.println(\" ID : \" rs.getInt(1)); } executeUpdate() Applicable for non-select operation(DML) public int executeUpdate(String sqlQuery) throws SQLException Eg: int affectedRow = st.executeUpdate(\"INSERT INTO employees(`id`) VALUES ('1')\"); Returns the afftected rows. execute() For both SELECT and NON- SELECT operations. If you don't know SQL query until run-time, we can use execute(). Return type => boolean \ud83d\ude80 True - SELECT Query \ud83d\ude80 false - Non- SELECT Query public boolean execute (String query) throws SQLException Eg: boolean b = st.execute(Dynamically provide SQLQuery); if(b == true) { ResultSet rs = st.getResultSet(); } else { int rowCount = st.getUpdateCount(); }","title":"SQL Injection"},{"location":"software-security/sql-injection/#types-of-sql-injection","text":"Classic SQL Injection Error based SQL Injection It relies on error message thrown by the database server to obtain information about the structure of the database. Union based SQL Injection It forces UNION SQL operator to combine the results of one or more select statements into a single results which is then returned as a response. Blind SQL Injection Boolean Based It forces the application to return a different result depending on whether the query returns True or False result.","title":"Types of SQL Injection"},{"location":"software-security/sql-injection/#prevention-technique","text":"Prepared Statement (With parameterized query) Paramaterized query force the developer to first refine all the SQL code and pass each parameter to query later. This coding style allows the database to distinguish between code and data, regardless of what user input is supplied. Prepared Statements ensure that an attacker is not able to change the intent of the query, even if SQL commands are inserted by an attackers. Explaination: Can't be able to change the paramter later. Stored Procedure Stored procedure are not always safe from SQL injection, however it tries to maintain certain standard of security. Stored Procedure programming constructs have the same effect as the use of parameterized queries when incremented safely which is the norm for most stored procedure languages. White List Input Valdation Whitelist validation is the practice of only accepting input that is known to be good. This can involve validating compliance with the expected type, length or size, numeric range, or other format standards before accepting the input for further processing. Escaping all user supplied input. Escaping all user supplied input is the practice of escaping all user supplied input before passing it to the database. While escaping, the input is converted to a format that is safe for the database to process. The escaped input doesn't perform any operation on the database, even if the input contains malicious SQL commands.","title":"Prevention technique"},{"location":"software-security/sql-injection/#steps-to-build-jdbc-application-using-prepared-statement","text":"Load and Register driver class. Class . forName ( \"Oracle.jdbc.OracleDriver\" ); Establish Conection Connection con = Driver . Manager . getConnection ( url , DbUsername , DbPassword ); Creation of statement Object String INSERT_USERS_SQL = \"INSERT INTO employee\" + \" (id, first_name, last_name) VALUES \" + \" (?, ?, ?);\" PreparedStatement preparedStatement = connection . prepareStatement ( INSERT_USERS_SQL ) preparedStatement . setInt ( 1 , 1 ); preparedStatement . setString ( 2 , \"Arjun\" ); preparedStatement . setString ( 3 , \"Adhikari\" ); Send and Execute SQL Query Result rs = preparedStatement . executeUpdate (); Process Result from ResultSet. If rs is result from Select Query, then we can use while loop to iterate through the result set. while ( rs . next ()) { System . out . Println ( rs . getInt ( 1 )); } If rs is int (Non-Select Query). System . out . Println ( rs + \" rows affected\" ); Close connection con.close();","title":"Steps to Build JDBC Application using Prepared Statement"},{"location":"software-security/sql-injection/#types-of-sql-commands","text":"DDL (Data Definition Language) CREATE TABLE, ALTER, DROP DQL (Data Query Language) SELECT DCL (Data Control Language) ALTER, PASSWORD, GRANT ACCESS DML (Data Manipulation Language) INSERT, DELETE, UPDATE (Data Administration) START AUDIT (Data Transaction) COMMIT, ROLLBACK, SAVEPOINT","title":"Types of SQL Commands"},{"location":"software-security/sql-injection/#what-should-i-know-as-java-developer","text":"","title":"What should I know as Java Developer ?"},{"location":"software-security/sql-injection/#select-queries-dql","text":"Returns Result Set","title":"Select Queries (DQL)"},{"location":"software-security/sql-injection/#non-select-queries-dml","text":"Returns Numeric Value","title":"Non-Select Queries (DML)"},{"location":"software-security/sql-injection/#methods-to-execute-sql-query","text":"executeQuery() To execute SELECT queries. public result executeQuery(String sqlQuery) throws SQLException Eg: Result rs = st.executeQuery(\"SELECT * FROM employess\"); while(rs.next()){ System.out.println(\" ID : \" rs.getInt(1)); } executeUpdate() Applicable for non-select operation(DML) public int executeUpdate(String sqlQuery) throws SQLException Eg: int affectedRow = st.executeUpdate(\"INSERT INTO employees(`id`) VALUES ('1')\"); Returns the afftected rows. execute() For both SELECT and NON- SELECT operations. If you don't know SQL query until run-time, we can use execute(). Return type => boolean \ud83d\ude80 True - SELECT Query \ud83d\ude80 false - Non- SELECT Query public boolean execute (String query) throws SQLException Eg: boolean b = st.execute(Dynamically provide SQLQuery); if(b == true) { ResultSet rs = st.getResultSet(); } else { int rowCount = st.getUpdateCount(); }","title":"Methods to Execute SQL Query"},{"location":"software-security/state-based-attacks/","text":"The last-known or current status of an application or a process. The terms maintaining state and/or managing state refer to keeping track of the condition of the process. The Internet is intrinsically stateless because each request for a new Web page is processed without any knowledge of previous pages requested. This is one of the chief drawbacks to the HTTP protocol. Because maintaining state is extremely useful, programmers have developed a number of techniques to add state to the World Wide Web. These include server APIs, such as NSAPI and ISAPI, and the use of cookies. In simple words, Web is stateless. Server doesn't care what page or what order is requested. Web has no built mechanism that specifies which sequence of webpages and forms are presented to user. This aspect of web is statelessness. Concerns regarding state: What if our service require certain order ? What if server must keep track of requests ? How can developer achieve statefulness ? Acheive Statefulness Hidden Fields Hidden fields are used to store data that is not visible to the user. Changing the values of those fields may change the behavior of the application. These fields may contain information like: user name, session id, etc. GET or POST parameters ( Common Gateway Interface - CGI ) GET parameters are used to pass data to the server through query parameters in unencrypted form. POST parameters are used to pass data to the server through request body in encrypted form. If we alter those parameters, the behavior of the application may change. Cookies Cookies Poisoning Changing the values of the cookie. Sessions Session Hijacking Gaining access to another user's session. Cookie Poisoning It is a technique that allows an attacker to trick a user into using a malicious cookie. By this technique, is an attack strategy in which the attacker alters, forges, hijacks, or otherwise \"poisons\" an otherwise valid cookie sent back to a server to steal data, bypass security, or both. Cookie A cookie is a piece of information that gets added to a user's device when they visit a website. It records their preferences as they use the website and is retrieved later by websites and web servers to do the following: authenticate the user's identity; speed up transactions - for example, on banking or e-commerce websites; monitor user behavior; auto fill personal information on web forms; track items in shopping carts; and streamline user experiences. Types of Cookies Session, or nonpersistent cookies last only as long as the user's website session and expire when the user leaves the website. Persistent cookies last beyond the life of a single session. They are created to recognize users when they return to a website and to deliver a personalized user experience with every visit. How do cookies work? As mentioned earlier, the data stored in the cookie lets the web server know the history of the website's interaction with a particular user. This enables the website to display the correct information for that user. Let's visualize a scenario to understand the role of cookies: A user enters login credentials on a website. The site's server verifies the credentials and authenticates the login. Subsequently, the server logs the session in a database, and a cookie containing the session ID is returned to the browser. The process of verifying the session ID in the cookie data with the database continues on every subsequent request until the user logs out. Once the user logs out, the session is automatically destroyed on the client and server However, the cookie data continues to remain on the user's hard disk -- meaning the cookie persists -- if they have checked the Remember me or Keep me logged in options. How cookie poisoning works Cookie poisoning happens when unauthorized persons (attackers) can manipulate cookies due to the poor security infrastructure of a website. By editing or manipulating the cookie, the attacker can gain access to the user data stored in the cookie. Cookie poisoning attacks are dangerous because they enable attackers to use the data stored inside cookies to gain unauthorized access to users' accounts or to steal their identities. Session hijacking, session spoofing and session fixation Cookie poisoning attacks usually target user session cookies. Cookie-based attacks against sessions aim to fool the web server into thinking that the attacker is the legitimate user. Examples of such attacks include the following: Session hijacking . When a legitimate user is logged in to a website, attackers use their knowledge of the current session cookie to take over the user's session. Session spoofing . Attackers use stolen or forged session tokens to start a new session and impersonate the legitimate user. This type of attack requires no user interaction and can be initiated even when the user is not logged in to the website. Session fixation . Attackers send a known session identifier via a phishing email or other means and fool a legitimate user into using this identifier to log in to a vulnerable or malicious site. The attacker then hijacks the user session.","title":"State Based Attacks"},{"location":"software-security/state-based-attacks/#acheive-statefulness","text":"Hidden Fields Hidden fields are used to store data that is not visible to the user. Changing the values of those fields may change the behavior of the application. These fields may contain information like: user name, session id, etc. GET or POST parameters ( Common Gateway Interface - CGI ) GET parameters are used to pass data to the server through query parameters in unencrypted form. POST parameters are used to pass data to the server through request body in encrypted form. If we alter those parameters, the behavior of the application may change. Cookies Cookies Poisoning Changing the values of the cookie. Sessions Session Hijacking Gaining access to another user's session.","title":"Acheive Statefulness"},{"location":"software-security/state-based-attacks/#cookie-poisoning","text":"It is a technique that allows an attacker to trick a user into using a malicious cookie. By this technique, is an attack strategy in which the attacker alters, forges, hijacks, or otherwise \"poisons\" an otherwise valid cookie sent back to a server to steal data, bypass security, or both.","title":"Cookie Poisoning"},{"location":"software-security/state-based-attacks/#cookie","text":"A cookie is a piece of information that gets added to a user's device when they visit a website. It records their preferences as they use the website and is retrieved later by websites and web servers to do the following: authenticate the user's identity; speed up transactions - for example, on banking or e-commerce websites; monitor user behavior; auto fill personal information on web forms; track items in shopping carts; and streamline user experiences.","title":"Cookie"},{"location":"software-security/state-based-attacks/#types-of-cookies","text":"Session, or nonpersistent cookies last only as long as the user's website session and expire when the user leaves the website. Persistent cookies last beyond the life of a single session. They are created to recognize users when they return to a website and to deliver a personalized user experience with every visit.","title":"Types of Cookies"},{"location":"software-security/state-based-attacks/#how-do-cookies-work","text":"As mentioned earlier, the data stored in the cookie lets the web server know the history of the website's interaction with a particular user. This enables the website to display the correct information for that user. Let's visualize a scenario to understand the role of cookies: A user enters login credentials on a website. The site's server verifies the credentials and authenticates the login. Subsequently, the server logs the session in a database, and a cookie containing the session ID is returned to the browser. The process of verifying the session ID in the cookie data with the database continues on every subsequent request until the user logs out. Once the user logs out, the session is automatically destroyed on the client and server However, the cookie data continues to remain on the user's hard disk -- meaning the cookie persists -- if they have checked the Remember me or Keep me logged in options.","title":"How do cookies work?"},{"location":"software-security/state-based-attacks/#how-cookie-poisoning-works","text":"Cookie poisoning happens when unauthorized persons (attackers) can manipulate cookies due to the poor security infrastructure of a website. By editing or manipulating the cookie, the attacker can gain access to the user data stored in the cookie. Cookie poisoning attacks are dangerous because they enable attackers to use the data stored inside cookies to gain unauthorized access to users' accounts or to steal their identities.","title":"How cookie poisoning works"},{"location":"software-security/state-based-attacks/#session-hijacking-session-spoofing-and-session-fixation","text":"Cookie poisoning attacks usually target user session cookies. Cookie-based attacks against sessions aim to fool the web server into thinking that the attacker is the legitimate user. Examples of such attacks include the following: Session hijacking . When a legitimate user is logged in to a website, attackers use their knowledge of the current session cookie to take over the user's session. Session spoofing . Attackers use stolen or forged session tokens to start a new session and impersonate the legitimate user. This type of attack requires no user interaction and can be initiated even when the user is not logged in to the website. Session fixation . Attackers send a known session identifier via a phishing email or other means and fool a legitimate user into using this identifier to log in to a vulnerable or malicious site. The attacker then hijacks the user session.","title":"Session hijacking, session spoofing and session fixation"},{"location":"web-application-architecture/introduction/","text":"What is Web Application Architecture? Web application architecture is a blueprint of simultaneous interactions between components, databases, middleware systems, user interfaces, and servers in an application. It can also be described as the layout that logically defines the connection between the server and client-side for a better web experience.","title":"Introduction"},{"location":"web-application-architecture/layered-architecture-for-web-applications/","text":"3 Tier Architecture In 3 tier architecture, there are 3 components: Client PC, An Application server and A Database Server. The work of server is distributed among application server and database server. Application server has the required communication functions. The data required by the business logic exists in database server. The required data is returned to public servers and then to client PC. Advantages: Improved Data Integrity High Degree of Flexibility in deployment platform and configurations Improved security High Performance and persistent objects Architecture is scalable, adding users and resources in future would be easy Maintenance and modifications can be done effectively Code and data reusability can be achieved Disadvantages: 3 tier architecture is complex compared to 1 tier and 2 tier Cost of network maintenance and deployment is greater than 1 tier and 2 tier The layers of web application are : 1. Presentation Layer. 2. Data Source Layer 3. Domain Logic & Business Logic Layer Presentation Layer The presentation layer is the layer that handles the user interface. It is the layer that handles the user interaction with the application. The presentation layer provides necessary data to the client\u2019s side. It receives input data, processes users\u2019 requests, sends them to data services and puts results to the browser. With Java EE, It is handled with JSP, JS, HTML and CSS. Components: User interface (UI) components These components provide the mechanism for users to interact with the application. They format data and render it for display, and acquire and validate data entered by users. UI process components To help synchronize and coordinate user interactions, it can be useful to drive the process using separate UI process components. This prevents the process flow and state management logic from being hard-coded into the UI elements themselves, and allows you to reuse the same basic user interaction patterns in other user interfaces. Data Source Layer The data source layer is the layer that handles the data services. This is where the data arrives at your organization. Information is stored and received from a database or file system. The information is passed back to the logic tier for processing, and then eventually back to the user. With Java EE, It is handled with JDBC, Hibernate, JPA. Domain Logic & Business Logic Layer The domain logic layer is the layer that handles the business logic. It uses an application server and processes the business logic for the application. With Java EE, It is handled with Servlet. Design Considerations For Presentation Layer Use the relevant pattern. Design for separation of concerns. Design for separation of concerns. Consider human interface guidelines. Adheres to use driven design principles. Business Layer Applicate Facade - a facade is an object that serves as a front-facing interface masking more complex underlying or structural code. Business Components Business Entity Components Business Workflow Data Access Layer Choose the data access technology Consider security flaws. Use abstraction to implement a lossely coupled interface to the data access layer. Decide how you will handle data exception. Decide how you will manage connection. Web Architecture with Java EE Servlet \ud83d\udd25 It is a technology that is used to create enterprise web application. Servlet is an API that provides many interfaces and classes including documentation. Servlet is an interface that must be implemented for creating any Servlet. Servlet is a class that extends the capabilities of the servers and responds to the incoming requests. It can respond to any requests. Servlet is a web component that is deployed on the server to create a dynamic web page. Advantages of Servlet Better performance: because it creates a thread for each request, not process. Portability: because it uses Java language. Robust: JVM manages Servlets, so we don't need to worry about the memory leak, garbage collection, etc. Secure: because it uses java language. Servlet API javax.servlet.* package javax.servlet.http.* package Packages and Interfaces Interface Package Servlet javax.servlet.* ServletRequest javax.servlet.* ServletDispatcher javax.servlet.* GenericServlet javax.servlet.* HttpServeletRequest javax.servlet.http.* HttpServletResponse javax.servlet.http.* HttpSession javax.servlet.http.* Filter javax.servlet.* javax.servlet.ServletRequest Steps to Develop Web Application Steps Description Step 1 Develop the web application architecture. Step 2 Develop the web resources ( HTML File, CSS File, Servlet File). Step 3 Develop the deployment descriptor ( web.xml ). Step 4 Compile the Java file. Step 5 Deploy the web application. Step 6 Start Server and access using the web browser. Folder Structure Life Cycle public void init(Servlet config) throws ServletException config : It is a configuration object that contains the information about the servlet. It is called only once. It is called only when Servelet is created and not called when any user requests the servlet. The init() method simply creates or load some data that will be used throughout the information of the servlet. public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException request : It is a request object that contains the information about the request. response : It is a response object that contains the information about the response. It is called when any user requests the servlet. It is called for each request. It is the main method to perform the actual task. The Servlet container (i.e. webserver) calls the service() to handle incoming request and write the formatter and response back to the client. Each time the server receives the request for a servlet, the server create a new thread to handle the request. It checks the HTTP request type ( GET, POST, PUT etc) and calls the appropriate method ( doGET(), doPOST(), doPUT() ). When we have nothing to do with service(), we can use the doGET() , doPOST() method. public void destroy() It is called when the servlet is destroyed. It is called only once at the end of the lifecycle of the Servlet. This method gices your Servlet a chance to clean up any resources that it may have created like: database connections, file handles, etc. How do you design business logic in yout app using Java EE? You must handle the business logic in Domain Layer. Benefits of separating the business entities from Controller/UI Layer : You can reuse the business entities with another client sections. Example : if you are developing a web based application as UI, later you also developed a Desktop UI. In this case you can reuse your Business Layer operations with multiple UIs. You can also use business layer to work as a web service. Decoupled business operations are easier to manage. If someone from development team has no idea how UI code works and only wants to correct some business logic, he can does.","title":"Layered Architecture"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#3-tier-architecture","text":"In 3 tier architecture, there are 3 components: Client PC, An Application server and A Database Server. The work of server is distributed among application server and database server. Application server has the required communication functions. The data required by the business logic exists in database server. The required data is returned to public servers and then to client PC.","title":"3 Tier Architecture"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#advantages","text":"Improved Data Integrity High Degree of Flexibility in deployment platform and configurations Improved security High Performance and persistent objects Architecture is scalable, adding users and resources in future would be easy Maintenance and modifications can be done effectively Code and data reusability can be achieved","title":"Advantages:"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#disadvantages","text":"3 tier architecture is complex compared to 1 tier and 2 tier Cost of network maintenance and deployment is greater than 1 tier and 2 tier The layers of web application are : 1. Presentation Layer. 2. Data Source Layer 3. Domain Logic & Business Logic Layer","title":"Disadvantages:"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#presentation-layer","text":"The presentation layer is the layer that handles the user interface. It is the layer that handles the user interaction with the application. The presentation layer provides necessary data to the client\u2019s side. It receives input data, processes users\u2019 requests, sends them to data services and puts results to the browser. With Java EE, It is handled with JSP, JS, HTML and CSS.","title":"Presentation Layer"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#components","text":"User interface (UI) components These components provide the mechanism for users to interact with the application. They format data and render it for display, and acquire and validate data entered by users. UI process components To help synchronize and coordinate user interactions, it can be useful to drive the process using separate UI process components. This prevents the process flow and state management logic from being hard-coded into the UI elements themselves, and allows you to reuse the same basic user interaction patterns in other user interfaces.","title":"Components:"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#data-source-layer","text":"The data source layer is the layer that handles the data services. This is where the data arrives at your organization. Information is stored and received from a database or file system. The information is passed back to the logic tier for processing, and then eventually back to the user. With Java EE, It is handled with JDBC, Hibernate, JPA.","title":"Data Source Layer"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#domain-logic-business-logic-layer","text":"The domain logic layer is the layer that handles the business logic. It uses an application server and processes the business logic for the application. With Java EE, It is handled with Servlet.","title":"Domain Logic &amp; Business Logic Layer"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#design-considerations","text":"For Presentation Layer Use the relevant pattern. Design for separation of concerns. Design for separation of concerns. Consider human interface guidelines. Adheres to use driven design principles. Business Layer Applicate Facade - a facade is an object that serves as a front-facing interface masking more complex underlying or structural code. Business Components Business Entity Components Business Workflow Data Access Layer Choose the data access technology Consider security flaws. Use abstraction to implement a lossely coupled interface to the data access layer. Decide how you will handle data exception. Decide how you will manage connection.","title":"Design Considerations"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#web-architecture-with-java-ee","text":"","title":"Web Architecture with Java EE"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#servlet","text":"It is a technology that is used to create enterprise web application. Servlet is an API that provides many interfaces and classes including documentation. Servlet is an interface that must be implemented for creating any Servlet. Servlet is a class that extends the capabilities of the servers and responds to the incoming requests. It can respond to any requests. Servlet is a web component that is deployed on the server to create a dynamic web page.","title":"Servlet \ud83d\udd25"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#advantages-of-servlet","text":"Better performance: because it creates a thread for each request, not process. Portability: because it uses Java language. Robust: JVM manages Servlets, so we don't need to worry about the memory leak, garbage collection, etc. Secure: because it uses java language.","title":"Advantages of Servlet"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#servlet-api","text":"javax.servlet.* package javax.servlet.http.* package","title":"Servlet API"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#packages-and-interfaces","text":"Interface Package Servlet javax.servlet.* ServletRequest javax.servlet.* ServletDispatcher javax.servlet.* GenericServlet javax.servlet.* HttpServeletRequest javax.servlet.http.* HttpServletResponse javax.servlet.http.* HttpSession javax.servlet.http.* Filter javax.servlet.* javax.servlet.ServletRequest","title":"Packages and Interfaces"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#steps-to-develop-web-application","text":"Steps Description Step 1 Develop the web application architecture. Step 2 Develop the web resources ( HTML File, CSS File, Servlet File). Step 3 Develop the deployment descriptor ( web.xml ). Step 4 Compile the Java file. Step 5 Deploy the web application. Step 6 Start Server and access using the web browser.","title":"Steps to Develop Web Application"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#folder-structure","text":"","title":"Folder Structure"},{"location":"web-application-architecture/layered-architecture-for-web-applications/#life-cycle","text":"public void init(Servlet config) throws ServletException config : It is a configuration object that contains the information about the servlet. It is called only once. It is called only when Servelet is created and not called when any user requests the servlet. The init() method simply creates or load some data that will be used throughout the information of the servlet. public void service(ServletRequest request, ServletResponse response) throws ServletException, IOException request : It is a request object that contains the information about the request. response : It is a response object that contains the information about the response. It is called when any user requests the servlet. It is called for each request. It is the main method to perform the actual task. The Servlet container (i.e. webserver) calls the service() to handle incoming request and write the formatter and response back to the client. Each time the server receives the request for a servlet, the server create a new thread to handle the request. It checks the HTTP request type ( GET, POST, PUT etc) and calls the appropriate method ( doGET(), doPOST(), doPUT() ). When we have nothing to do with service(), we can use the doGET() , doPOST() method. public void destroy() It is called when the servlet is destroyed. It is called only once at the end of the lifecycle of the Servlet. This method gices your Servlet a chance to clean up any resources that it may have created like: database connections, file handles, etc. How do you design business logic in yout app using Java EE? You must handle the business logic in Domain Layer. Benefits of separating the business entities from Controller/UI Layer : You can reuse the business entities with another client sections. Example : if you are developing a web based application as UI, later you also developed a Desktop UI. In this case you can reuse your Business Layer operations with multiple UIs. You can also use business layer to work as a web service. Decoupled business operations are easier to manage. If someone from development team has no idea how UI code works and only wants to correct some business logic, he can does.","title":"Life Cycle"},{"location":"web-application-architecture/mvc-pattern/","text":"The Model View Controller (MVC) design pattern specifies that an application consist of a data model, presentation information, and control information. The pattern requires that each of these be separated into different objects. The Model contains only the pure application data, it contains no logic describing how to present the data to a user. The View presents the model\u2019s data to the user. The view knows how to access the model\u2019s data, but it does not know what this data means or what the user can do to manipulate it. The Controller exists between the view and the model. It listens to events triggered by the view (or another external source) and executes the appropriate reaction to these events. In most cases, the reaction is to call a method on the model. Since the view and the model are connected through a notification mechanism, the result of this action is then automatically reflected in the view. Advantages Multiple developers can work simultaneously on the model, controller and views. MVC enables logical grouping of related actions on a controller together. The views for a specific model are also grouped together. Models can have multiple views. Disadvantages The framework navigation can be complex because it introduces new layers of abstraction and requires users to adapt to the decomposition criteria of MVC. Knowledge on multiple technologies becomes the norm. Developers using MVC need to be skilled in multiple technologies. DAO and DTO objects DTO Data Transfer Objects. It is used to transfer the data between classes and modules of your application. These are generally used to transfer data from controller to client (JS). Term is also used for POCOs/POJOs by few which actually holds the data retrieved from Database. DTO should only contain private fields for your data, getters, setters, and constructors. DTO is not recommended to add business logic methods to such classes, but it is OK to add some util methods. DAO Data Access Objects. It should encapsulate the logic for retrieving, saving and updating data in your data storage (a database, a file-system, whatever). Data Access Object is one of the design patterns used to implement DAL. This builds and executes queries on database and maps the result to POCO/POJO using various other patterns including 'Query Object', 'Data Mapper' etc. DAO layer could be further extended using 'Repository' pattern. DAL Data Access Layer It abstracts your database activities using DAO/Repository/POCO etc. ORMs help you to build your DAL but it could be implemented without using them also. interface PersonDTO { String getName (); void setName ( String name ); //..... } interface PersonDAO { PersonDTO findById ( long id ); void save ( PersonDTO person ); //..... } POJO Plain Old Java Objects. A hand-wavy way of describing \"normal\" non-enterprise Java Objects. It's just a fancy name for a very basic class structure. POJO is not recommended to add business logic methods to such classes, but it is OK to add some util methods. Example \ud83d\udd25 To implement web application based on MVC design pattern. Student & StudentService Class [ Model Layer - Data Source Layer ] StudentServlet Class [ Controller Layer- Business Logic Layer ] StudentRecord.jsp [ View Layer - Presentation Layer ] Student Class Student Class contains the data of the student. public class Student { private int id ; private String firstName ; private String lastName ; } StudentService Class StudentService Class manages the data management (access, modify, delete) of the student. public class StudentService { public Optional < Student > getStudent ( int id ) { switch ( id ) { case 1 : return Optional . of ( new Student ( 1 , \"Ram\" , \"Sharma\" )); case 2 : return Optional . of ( new Student ( 2 , \"Sita\" , \"Sharma\" )); default : return Optional . empty (); } } } StudentServlet Class StudentServlet Class is the controller class which handles the request from the user and sends the response to the user. @WebServlet ( name = \"StudentServlet\" , urlPatterns = { \"/student\" }) public class StudentServlet extends HttpServlet { private StudentService studentService = new StudentService (); private Gson gson = new Gson (); @Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { int id = Integer . parseInt ( request . getParameter ( \"id\" )); Optional < Student > student = studentService . getStudent ( id ); if ( student . isPresent ()) { response . setContentType ( \"application/json\" ); response . getWriter (). write ( gson . toJson ( student . get ())); } else { response . setStatus ( HttpServletResponse . SC_NOT_FOUND ); } } } StudentRecord.jsp StudentRecord.jsp is the view component which displays the data to the user. JSP file has the HTML code which displays the data to the user. <!DOCTYPE html> < html > < head > < title > Student Record </ title > </ head > < body > < % if (request.getAttribute(\"studentRecord\") != null) { Student student = (Student) request.getAttribute(\"studentRecord\"); %> < h1 > Student Record </ h1 > < div > ID: < %= student.getId()%> </ div > < div > First Name: < %= student.getFirstName()%> </ div > < div > Last Name: < %= student.getLastName()%> </ div > < % } else { %> < h1 > No student record found. </ h1 > < % } %> </ body > </ html > Question Demonstrate MVC architecture with the help of Servlet, JSP, POJO classes and JDBC. We\u2019ll create an Employee Registration module using JSP, Servlet, JDBC, and MySQL database. MYSQL Database Setup Let's create a database named employee in MySQL. Let's create an employee table using below DDL script: CREATE TABLE ` employee ` ( ` id ` int ( 3 ) NOT NULL , ` first_name ` varchar ( 20 ) DEFAULT NULL , ` last_name ` varchar ( 20 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ; Model Layer Let's create the Employee class which will act as our Model class. This can be view as POJO (Plain Old Java Objects) class. # Employee.java public class Employee { private String firstName ; private String lastName ; Employee ( String fn , String ln ) { this . firstName = fn this . lastName = ln ; } public String getFirstName () { return firstName ; } public void setFirstName ( String firstName ) { this . firstName = firstName ; } public String getLastName () { return lastName ; } public void setLastName ( String lastName ) { this . lastName = lastName ; } } DAO Layer Let's create EmployeeDAO class that contains JDBC code to connect with the MySQL database. # EmployeeDAO.java import java.sql.Connection ; import java.sql.DriverManager ; import java.sql.PreparedStatement ; import java.sql.SQLException ; public class EmployeeDAO { public int registerEmployee ( Employee employee ) throws ClassNotFoundException { String INSERT_USERS_SQL = \"INSERT INTO employee\" + \" (id, first_name, last_name) VALUES \" + \" (?, ?, ?);\" ; int result = 0 ; Class . forName ( \"com.mysql.jdbc.Driver\" ); try { Connection connection = DriverManager . getConnection ( \"jdbc:mysql://localhost:3306/employee\" , \"root\" , \"root\" ); PreparedStatement preparedStatement = connection . prepareStatement ( INSERT_USERS_SQL ) preparedStatement . setInt ( 1 , 1 ); preparedStatement . setString ( 2 , employee . getFirstName ()); preparedStatement . setString ( 3 , employee . getLastName ()); System . out . println ( preparedStatement ); // Step 3: Execute the query or update query result = preparedStatement . executeUpdate (); } catch ( SQLException e ) { e . printStackTrace (); } return result ; } } Controller Layer Let's create an EmployeeServlet class to process HTTP request parameters and redirect to the appropriate JSP page after request data stored in the database: # EmployeeServlet.java import java.io.IOException ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; @WebServlet ( \"/register\" ) public class EmployeeServlet extends HttpServlet { private EmployeeDAO employeeDao ; public void init () { employeeDao = new EmployeeDAO (); } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { String firstName = request . getParameter ( \"firstName\" ); String lastName = request . getParameter ( \"lastName\" ); Employee employee = new Employee ( firstName , lastName ); try { employeeDao . registerEmployee ( employee ); } catch ( Exception e ) { e . printStackTrace (); } response . sendRedirect ( \"employeeRegisterSuccess.jsp\" ); } } View Layer Let's design an employee registration HTML form with the following fields: - firstName - lastName # employeeRegister.jsp < %@ page language=\"java\" contentType=\"text/html; %> <!DOCTYPE html> < html > < head > < title > Register Employee </ title > </ head > < body > < h1 > Employee Register Form </ h1 > < form action = \"<%= request.getContextPath() %>/register\" method = \"post\" > < table style = \"width: 80%\" > < tr > < td > First Name </ td > < td >< input type = \"text\" name = \"firstName\" /></ td > </ tr > < tr > < td > Last Name </ td > < td >< input type = \"text\" name = \"lastName\" /></ td > </ tr > </ table > < input type = \"submit\" value = \"Submit\" /> </ form > </ body > </ html > After an employee successfully registered then this page show a successful message on screen: # employeeRegisterSuccess.jsp < %@ page language=\"java\" contentType=\"text/html; %> <!DOCTYPE html> < html > < head > < title > Employee Register Success </ title > </ head > < body > < h1 > User successfully registered! </ h1 > </ body > </ html >","title":"MVC Pattern"},{"location":"web-application-architecture/mvc-pattern/#advantages","text":"Multiple developers can work simultaneously on the model, controller and views. MVC enables logical grouping of related actions on a controller together. The views for a specific model are also grouped together. Models can have multiple views.","title":"Advantages"},{"location":"web-application-architecture/mvc-pattern/#disadvantages","text":"The framework navigation can be complex because it introduces new layers of abstraction and requires users to adapt to the decomposition criteria of MVC. Knowledge on multiple technologies becomes the norm. Developers using MVC need to be skilled in multiple technologies.","title":"Disadvantages"},{"location":"web-application-architecture/mvc-pattern/#dao-and-dto-objects","text":"","title":"DAO and DTO objects"},{"location":"web-application-architecture/mvc-pattern/#dto","text":"Data Transfer Objects. It is used to transfer the data between classes and modules of your application. These are generally used to transfer data from controller to client (JS). Term is also used for POCOs/POJOs by few which actually holds the data retrieved from Database. DTO should only contain private fields for your data, getters, setters, and constructors. DTO is not recommended to add business logic methods to such classes, but it is OK to add some util methods.","title":"DTO"},{"location":"web-application-architecture/mvc-pattern/#dao","text":"Data Access Objects. It should encapsulate the logic for retrieving, saving and updating data in your data storage (a database, a file-system, whatever). Data Access Object is one of the design patterns used to implement DAL. This builds and executes queries on database and maps the result to POCO/POJO using various other patterns including 'Query Object', 'Data Mapper' etc. DAO layer could be further extended using 'Repository' pattern.","title":"DAO"},{"location":"web-application-architecture/mvc-pattern/#dal","text":"Data Access Layer It abstracts your database activities using DAO/Repository/POCO etc. ORMs help you to build your DAL but it could be implemented without using them also. interface PersonDTO { String getName (); void setName ( String name ); //..... } interface PersonDAO { PersonDTO findById ( long id ); void save ( PersonDTO person ); //..... }","title":"DAL"},{"location":"web-application-architecture/mvc-pattern/#pojo","text":"Plain Old Java Objects. A hand-wavy way of describing \"normal\" non-enterprise Java Objects. It's just a fancy name for a very basic class structure. POJO is not recommended to add business logic methods to such classes, but it is OK to add some util methods.","title":"POJO"},{"location":"web-application-architecture/mvc-pattern/#example","text":"To implement web application based on MVC design pattern. Student & StudentService Class [ Model Layer - Data Source Layer ] StudentServlet Class [ Controller Layer- Business Logic Layer ] StudentRecord.jsp [ View Layer - Presentation Layer ]","title":"Example \ud83d\udd25"},{"location":"web-application-architecture/mvc-pattern/#student-class","text":"Student Class contains the data of the student. public class Student { private int id ; private String firstName ; private String lastName ; }","title":"Student Class"},{"location":"web-application-architecture/mvc-pattern/#studentservice-class","text":"StudentService Class manages the data management (access, modify, delete) of the student. public class StudentService { public Optional < Student > getStudent ( int id ) { switch ( id ) { case 1 : return Optional . of ( new Student ( 1 , \"Ram\" , \"Sharma\" )); case 2 : return Optional . of ( new Student ( 2 , \"Sita\" , \"Sharma\" )); default : return Optional . empty (); } } }","title":"StudentService Class"},{"location":"web-application-architecture/mvc-pattern/#studentservlet-class","text":"StudentServlet Class is the controller class which handles the request from the user and sends the response to the user. @WebServlet ( name = \"StudentServlet\" , urlPatterns = { \"/student\" }) public class StudentServlet extends HttpServlet { private StudentService studentService = new StudentService (); private Gson gson = new Gson (); @Override protected void doGet ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { int id = Integer . parseInt ( request . getParameter ( \"id\" )); Optional < Student > student = studentService . getStudent ( id ); if ( student . isPresent ()) { response . setContentType ( \"application/json\" ); response . getWriter (). write ( gson . toJson ( student . get ())); } else { response . setStatus ( HttpServletResponse . SC_NOT_FOUND ); } } }","title":"StudentServlet Class"},{"location":"web-application-architecture/mvc-pattern/#studentrecordjsp","text":"StudentRecord.jsp is the view component which displays the data to the user. JSP file has the HTML code which displays the data to the user. <!DOCTYPE html> < html > < head > < title > Student Record </ title > </ head > < body > < % if (request.getAttribute(\"studentRecord\") != null) { Student student = (Student) request.getAttribute(\"studentRecord\"); %> < h1 > Student Record </ h1 > < div > ID: < %= student.getId()%> </ div > < div > First Name: < %= student.getFirstName()%> </ div > < div > Last Name: < %= student.getLastName()%> </ div > < % } else { %> < h1 > No student record found. </ h1 > < % } %> </ body > </ html >","title":"StudentRecord.jsp"},{"location":"web-application-architecture/mvc-pattern/#question","text":"Demonstrate MVC architecture with the help of Servlet, JSP, POJO classes and JDBC. We\u2019ll create an Employee Registration module using JSP, Servlet, JDBC, and MySQL database.","title":"Question"},{"location":"web-application-architecture/mvc-pattern/#mysql-database-setup","text":"Let's create a database named employee in MySQL. Let's create an employee table using below DDL script: CREATE TABLE ` employee ` ( ` id ` int ( 3 ) NOT NULL , ` first_name ` varchar ( 20 ) DEFAULT NULL , ` last_name ` varchar ( 20 ) DEFAULT NULL , PRIMARY KEY ( ` id ` ) ) ;","title":"MYSQL Database Setup"},{"location":"web-application-architecture/mvc-pattern/#model-layer","text":"Let's create the Employee class which will act as our Model class. This can be view as POJO (Plain Old Java Objects) class. # Employee.java public class Employee { private String firstName ; private String lastName ; Employee ( String fn , String ln ) { this . firstName = fn this . lastName = ln ; } public String getFirstName () { return firstName ; } public void setFirstName ( String firstName ) { this . firstName = firstName ; } public String getLastName () { return lastName ; } public void setLastName ( String lastName ) { this . lastName = lastName ; } }","title":"Model Layer"},{"location":"web-application-architecture/mvc-pattern/#dao-layer","text":"Let's create EmployeeDAO class that contains JDBC code to connect with the MySQL database. # EmployeeDAO.java import java.sql.Connection ; import java.sql.DriverManager ; import java.sql.PreparedStatement ; import java.sql.SQLException ; public class EmployeeDAO { public int registerEmployee ( Employee employee ) throws ClassNotFoundException { String INSERT_USERS_SQL = \"INSERT INTO employee\" + \" (id, first_name, last_name) VALUES \" + \" (?, ?, ?);\" ; int result = 0 ; Class . forName ( \"com.mysql.jdbc.Driver\" ); try { Connection connection = DriverManager . getConnection ( \"jdbc:mysql://localhost:3306/employee\" , \"root\" , \"root\" ); PreparedStatement preparedStatement = connection . prepareStatement ( INSERT_USERS_SQL ) preparedStatement . setInt ( 1 , 1 ); preparedStatement . setString ( 2 , employee . getFirstName ()); preparedStatement . setString ( 3 , employee . getLastName ()); System . out . println ( preparedStatement ); // Step 3: Execute the query or update query result = preparedStatement . executeUpdate (); } catch ( SQLException e ) { e . printStackTrace (); } return result ; } }","title":"DAO Layer"},{"location":"web-application-architecture/mvc-pattern/#controller-layer","text":"Let's create an EmployeeServlet class to process HTTP request parameters and redirect to the appropriate JSP page after request data stored in the database: # EmployeeServlet.java import java.io.IOException ; import javax.servlet.ServletException ; import javax.servlet.annotation.WebServlet ; import javax.servlet.http.HttpServlet ; import javax.servlet.http.HttpServletRequest ; import javax.servlet.http.HttpServletResponse ; @WebServlet ( \"/register\" ) public class EmployeeServlet extends HttpServlet { private EmployeeDAO employeeDao ; public void init () { employeeDao = new EmployeeDAO (); } protected void doPost ( HttpServletRequest request , HttpServletResponse response ) throws ServletException , IOException { String firstName = request . getParameter ( \"firstName\" ); String lastName = request . getParameter ( \"lastName\" ); Employee employee = new Employee ( firstName , lastName ); try { employeeDao . registerEmployee ( employee ); } catch ( Exception e ) { e . printStackTrace (); } response . sendRedirect ( \"employeeRegisterSuccess.jsp\" ); } }","title":"Controller Layer"},{"location":"web-application-architecture/mvc-pattern/#view-layer","text":"Let's design an employee registration HTML form with the following fields: - firstName - lastName # employeeRegister.jsp < %@ page language=\"java\" contentType=\"text/html; %> <!DOCTYPE html> < html > < head > < title > Register Employee </ title > </ head > < body > < h1 > Employee Register Form </ h1 > < form action = \"<%= request.getContextPath() %>/register\" method = \"post\" > < table style = \"width: 80%\" > < tr > < td > First Name </ td > < td >< input type = \"text\" name = \"firstName\" /></ td > </ tr > < tr > < td > Last Name </ td > < td >< input type = \"text\" name = \"lastName\" /></ td > </ tr > </ table > < input type = \"submit\" value = \"Submit\" /> </ form > </ body > </ html > After an employee successfully registered then this page show a successful message on screen: # employeeRegisterSuccess.jsp < %@ page language=\"java\" contentType=\"text/html; %> <!DOCTYPE html> < html > < head > < title > Employee Register Success </ title > </ head > < body > < h1 > User successfully registered! </ h1 > </ body > </ html >","title":"View Layer"}]}